{"version":3,"file":"Active.js","names":["BaseModel","ActiveHelper","InvestCalc","BuyTrade","SellTrade","Payment","moment","ActiveValuer","Catalog","Money","CurrencyConstants","Active","controller","related","func","create","loaded","currencyFields","constructor","attributes","setGetters","avg_own_date_by_value","trades","buy_trades","date","value","length","sort","a","b","dateA","trade_at_datetime","dateB","isValid","i","trade","trade_at","tradeDate","diffInDays","Math","abs","diff","sumValue","count","diffValue","percentValue","avgDays","add","momentDate","clone","startOf","format","avg_own_date","buyTrades","sellTrades","sell_trades","getAvgDate","x","map","item","newTrade","push","aDate","bDate","active_id","isBefore","payments","valuation","obj","getValuation","sum","period","getPeriod","buySum","getBuySum","buyOriginalSum","getBuyOriginalSum","originDiffSum","now","getDiffCurrency","diffSum","getDiff","originValuation","getOriginalValuation","originValuationWithCurrency","getCurrencySignByActive","getFactPercent","getFactPercentByItem","getAnnuallyPercentByItem","factPercent","getAnnuallyPercent","annuallyPercent"],"sources":["../../src/models/Active.js"],"sourcesContent":["import BaseModel from \"./BaseModel\";\r\nimport ActiveHelper from \"../helpers/Active\";\r\nimport InvestCalc from \"../helpers/InvestCalc\";\r\nimport BuyTrade from \"./BuyTrade\";\r\nimport SellTrade from \"./SellTrade\";\r\nimport Payment from \"./Payment\";\r\nimport moment from \"moment/moment\";\r\nimport ActiveValuer from \"./../helpers/Active/ActiveValuer\";\r\nimport Catalog from \"./Catalog\";\r\nimport {Money} from \"../helpers\";\r\nimport {CurrencyConstants} from \"../constants\";\r\n\r\nexport default class Active extends BaseModel\r\n{\r\n  /**\r\n   *\r\n   * @type {string}\r\n   */\r\n  controller = 'active';\r\n\r\n  /**\r\n   *\r\n   * @type {{payments: BaseModel.load}}\r\n   */\r\n  related = {\r\n    'payments': {func: Payment.create, loaded: false},\r\n    'buy_trades': {func: BuyTrade.create, loaded: false},\r\n    'sell_trades': {func: SellTrade.create, loaded: false},\r\n    'item': {func: Catalog.create, loaded: false},\r\n    'trades': {loaded: false}\r\n  };\r\n\r\n  currencyFields = [\r\n    'buy_currency',\r\n    'income_currency',\r\n    'sell_currency',\r\n  ];\r\n\r\n  /**\r\n   *\r\n   * @param {Array} attributes\r\n   */\r\n  constructor(attributes)\r\n  {\r\n    super();\r\n    this.attributes = attributes;\r\n\r\n    this.setGetters(attributes);\r\n  }\r\n\r\n  get avg_own_date_by_value()\r\n  {\r\n    if (this['tmp_avg_own_date_by_value'] === null || typeof this['tmp_avg_own_date_by_value'] === 'undefined')\r\n    {\r\n      let trades = this.buy_trades;\r\n\r\n      let date = null;\r\n      let value = 0;\r\n      if (trades.length)\r\n      {\r\n        trades.sort((a, b) => {\r\n          let dateA = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n          let dateB = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n          if (!dateA.isValid() || !dateB.isValid()) {\r\n            return 0; // если дата невалидна, считаем их равными\r\n          }\r\n          return dateA - dateB;\r\n        });\r\n\r\n        for (let i = 0; i < trades.length; i++)\r\n        {\r\n          let trade = trades[i];\r\n\r\n          if (trade.trade_at)\r\n          {\r\n            if (date)\r\n            {\r\n              //каждая следующая дата будет больше прошлой,\r\n              //поэтому всегда двигаемся вперед\r\n              //разница в днях\r\n              let tradeDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n\r\n              if(tradeDate.isValid())\r\n              {\r\n                let diffInDays = Math.abs(date.diff(tradeDate, 'days'));\r\n\r\n                //сумма объёмов\r\n                let sumValue = value + trade.count;\r\n                //пропорция\r\n                //из будущего объёма вычитаем текущий\r\n                let diffValue = trade.count - value;\r\n                //процентное соотношение к общему объёму\r\n                let percentValue = Math.abs(diffValue) / sumValue;\r\n                //среднее количество дней учитывая вес объема\r\n                let avgDays = diffInDays / 100 * percentValue;\r\n\r\n                //для следующей итерации сохраняем объём по текущей дате\r\n                value = sumValue;\r\n\r\n                if (diffValue > 0)\r\n                {\r\n                  date.add(avgDays, 'days');\r\n                } else\r\n                {\r\n                  let momentDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss').clone().startOf('day');\r\n\r\n                  if(momentDate.isValid())\r\n                  {\r\n                    date.add(avgDays, 'days');\r\n                  }\r\n                }\r\n              }\r\n            } else\r\n            {\r\n              value = trade.count;\r\n              let momentDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss').clone().startOf('day');\r\n\r\n              if(momentDate.isValid())\r\n              {\r\n                date = momentDate;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.attributes['tmp_avg_own_date_by_value'] = date ? date.format('DD.MM.YYYY') : '';\r\n    }\r\n\r\n    return this.attributes['tmp_avg_own_date_by_value'];\r\n  }\r\n\r\n\r\n  get avg_own_date()\r\n  {\r\n    if (this['tmp_avg_own_date'] === null || typeof this['tmp_avg_own_date'] === 'undefined')\r\n    {\r\n      let buyTrades = this.buy_trades;\r\n      let sellTrades = this.sell_trades;\r\n\r\n      let date = null;\r\n\r\n      buyTrades.sort((a, b) => {\r\n        let dateA = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        let dateB = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        if (!dateA.isValid() || !dateB.isValid()) {\r\n          return 0; // если дата невалидна, считаем их равными\r\n        }\r\n        return dateA - dateB;\r\n      });\r\n\r\n      sellTrades.sort((a, b) => {\r\n        let dateA = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        let dateB = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        if (!dateA.isValid() || !dateB.isValid()) {\r\n          return 0; // если дата невалидна, считаем их равными\r\n        }\r\n        return dateA - dateB;\r\n      });\r\n\r\n      if (buyTrades?.length)\r\n      {\r\n        for (let i = 0; i < buyTrades.length; i++)\r\n        {\r\n          let trade = buyTrades[i];\r\n\r\n          date = ActiveHelper.getAvgDate(trade, date);\r\n        }\r\n\r\n        this['tmp_avg_own_date'] = date ? date.format('DD.MM.YYYY') : '';\r\n      }\r\n\r\n      if (sellTrades?.length)\r\n      {\r\n        for (let i = 0; i < sellTrades.length; i++)\r\n        {\r\n          let trade = sellTrades[i];\r\n\r\n          date = ActiveHelper.getAvgDate(trade, date);\r\n        }\r\n\r\n        this['tmp_avg_own_date'] = date ? date.format('DD.MM.YYYY') : '';\r\n      }\r\n    }\r\n\r\n    return this['tmp_avg_own_date'];\r\n  }\r\n\r\n  set avg_own_date(x)\r\n  {\r\n    this['tmp_avg_own_date'] = x;\r\n  }\r\n\r\n  get trades()\r\n  {\r\n    if (!this.related.trades.loaded)\r\n    {\r\n      this['tmp_trades'] = [];\r\n\r\n      if (this.attributes['sell_trades'] && this.attributes['sell_trades'].length)\r\n      {\r\n        this.attributes['sell_trades'].map((item) =>\r\n        {\r\n          let newTrade = SellTrade.create({...item});\r\n\r\n          this['tmp_trades'].push(newTrade)\r\n        });\r\n      }\r\n\r\n      if (this.attributes['buy_trades'] && this.attributes['buy_trades'].length)\r\n      {\r\n        this.attributes['buy_trades'].map((item) =>\r\n        {\r\n          let newTrade = BuyTrade.create({...item});\r\n\r\n          this['tmp_trades'].push(newTrade)\r\n        });\r\n      }\r\n\r\n      this['tmp_trades']?.sort((a, b) =>\r\n      {\r\n        let aDate = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss')\r\n        let bDate = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss')\r\n\r\n        if (a.active_id < b.active_id)\r\n        {\r\n          return -1;\r\n        }\r\n        if (b.active_id < a.active_id)\r\n        {\r\n          return 1;\r\n        }\r\n        if (aDate.isBefore(bDate))\r\n        {\r\n          return -1;\r\n        }\r\n        if (bDate.isBefore(aDate))\r\n        {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n\r\n      this.related.trades.loaded = true;\r\n    }\r\n\r\n    return this['tmp_trades'] ? this['tmp_trades'] : [];\r\n  }\r\n\r\n  set trades(x)\r\n  {\r\n    this['tmp_trades'] = x;\r\n  }\r\n\r\n  get payments()\r\n  {\r\n    if (!this.related.payments.loaded && this.attributes['payments'] && this.attributes['payments'].length)\r\n    {\r\n      this['tmp_payments'] = this.attributes['payments'].map((item) =>\r\n      {\r\n        return Payment.create(item);\r\n      });\r\n      this.related.payments.loaded = true;\r\n    }\r\n\r\n    return this['tmp_payments'] ? this['tmp_payments'] : [];\r\n  }\r\n\r\n  set payments(x)\r\n  {\r\n    this['tmp_payments'] = x;\r\n  }\r\n\r\n  get buy_trades()\r\n  {\r\n    if (!this.related.buy_trades.loaded && this.attributes['buy_trades'] && this.attributes['buy_trades'].length)\r\n    {\r\n      this['tmp_buy_trades'] = this.attributes['buy_trades'].map((item) =>\r\n      {\r\n        return new BuyTrade(item);\r\n      });\r\n      this.related.buy_trades.loaded = true;\r\n    }\r\n\r\n    return this['tmp_buy_trades'] ? this['tmp_buy_trades'] : [];\r\n  }\r\n\r\n  get sell_trades()\r\n  {\r\n    if (!this.related.sell_trades.loaded && this.attributes['sell_trades'] && this.attributes['sell_trades'].length)\r\n    {\r\n      this['tmp_sell_trades'] = this.attributes['sell_trades'].map((item) =>\r\n      {\r\n        return new SellTrade(item);\r\n      });\r\n      this.related.sell_trades.loaded = true;\r\n    }\r\n\r\n    return this['tmp_sell_trades'] ? this['tmp_sell_trades'] : [];\r\n  }\r\n\r\n  set sell_trades(x)\r\n  {\r\n    this['tmp_sell_trades'] = x;\r\n  }\r\n\r\n  get valuation()\r\n  {\r\n    if (this['tmp_valuation'] === null || typeof this['tmp_valuation'] === 'undefined')\r\n    {\r\n      let obj = ActiveValuer.getValuation(this.attributes, moment());\r\n\r\n      if (obj)\r\n      {\r\n        this['tmp_valuation'] = obj.sum;\r\n      } else\r\n      {\r\n        this['tmp_valuation'] = 0;\r\n      }\r\n    }\r\n\r\n    return this['tmp_valuation'];\r\n  }\r\n\r\n  get period()\r\n  {\r\n    return InvestCalc.getPeriod(this, moment());\r\n  }\r\n\r\n  get buySum()\r\n  {\r\n    return InvestCalc.getBuySum(this, '');\r\n  }\r\n\r\n  get buyOriginalSum()\r\n  {\r\n    return InvestCalc.getBuyOriginalSum(this);\r\n  }\r\n\r\n  set valuation(x)\r\n  {\r\n    this['tmp_valuation'] = x;\r\n  }\r\n\r\n  get originDiffSum()\r\n  {\r\n    const now = moment();\r\n    return ActiveValuer.getDiffCurrency(this, now)?.sum;\r\n  }\r\n\r\n  get diffSum()\r\n  {\r\n    const now = moment();\r\n    return ActiveValuer.getDiff(this, now, '', '')?.sum;\r\n  }\r\n\r\n  get originValuation()\r\n  {\r\n    if (this['tmp_originValuation'] === null || typeof this['tmp_originValuation'] === 'undefined')\r\n    {\r\n      let obj = ActiveValuer.getOriginalValuation(this.attributes, moment());\r\n\r\n      if (obj)\r\n      {\r\n        this['tmp_originValuation'] = obj.sum;\r\n      } else\r\n      {\r\n        this['tmp_originValuation'] = 0;\r\n      }\r\n    }\r\n\r\n    return this['tmp_originValuation'];\r\n  }\r\n\r\n  set originValuation(x)\r\n  {\r\n    this['tmp_originValuation'] = x;\r\n  }\r\n\r\n  get originValuationWithCurrency()\r\n  {\r\n    return Money.format(this.originValuation) + ' ' + CurrencyConstants.getCurrencySignByActive(this)\r\n  }\r\n\r\n  async getFactPercent()\r\n  {\r\n    if ((this['tmp_factPercent'] === null || typeof this['tmp_factPercent'] === 'undefined') && (this['tmp_annuallyPercent'] === null || typeof this['tmp_annuallyPercent'] === 'undefined'))\r\n    {\r\n      this['tmp_factPercent'] = await InvestCalc.getFactPercentByItem(this);\r\n      this['tmp_annuallyPercent'] = await InvestCalc.getAnnuallyPercentByItem(this);\r\n    }\r\n\r\n    return this['tmp_factPercent'];\r\n  }\r\n\r\n  get factPercent()\r\n  {\r\n    return this['tmp_factPercent'];\r\n  }\r\n\r\n  set factPercent(x)\r\n  {\r\n    this['tmp_factPercent'] = x;\r\n  }\r\n\r\n  async getAnnuallyPercent()\r\n  {\r\n    if ((this['tmp_factPercent'] === null || typeof this['tmp_factPercent'] === 'undefined') && (this['tmp_annuallyPercent'] === null || typeof this['tmp_annuallyPercent'] === 'undefined'))\r\n    {\r\n      this['tmp_factPercent'] = await InvestCalc.getFactPercentByItem(this);\r\n      this['tmp_annuallyPercent'] = await InvestCalc.getAnnuallyPercentByItem(this);\r\n    }\r\n\r\n    return this['tmp_annuallyPercent'];\r\n  }\r\n\r\n  get annuallyPercent()\r\n  {\r\n    return this['tmp_annuallyPercent'];\r\n  }\r\n\r\n  set annuallyPercent(x)\r\n  {\r\n    this['tmp_annuallyPercent'] = x;\r\n  }\r\n\r\n  set buy_trades(x)\r\n  {\r\n    this['tmp_buy_trades'] = x;\r\n  }\r\n\r\n  get item()\r\n  {\r\n    if (!this.related.item.loaded && this.attributes['item'])\r\n    {\r\n      this['tmp_item'] = new Catalog(this.attributes['item']);\r\n      this.related.item.loaded = true;\r\n    }\r\n\r\n    return this['tmp_item'] ? this['tmp_item'] : new Catalog({});\r\n  }\r\n}"],"mappings":"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"}