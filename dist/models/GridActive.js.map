{"version":3,"file":"GridActive.js","names":["BaseModel","ActiveHelper","InvestCalc","BuyTrade","SellTrade","Payment","moment","ActiveValuer","Catalog","Money","GridActive","controller","related","func","create","loaded","constructor","attributes","setGetters","avg_own_date_by_value","trades","buy_trades","date","value","length","sort","a","b","dateA","trade_at_datetime","dateB","isValid","i","trade","trade_at","tradeDate","diffInDays","Math","abs","diff","sumValue","count","diffValue","percentValue","avgDays","add","momentDate","clone","startOf","format","avg_own_date","buyTrades","sellTrades","sell_trades","getAvgDate","x","map","item","newTrade","push","aDate","bDate","active_id","isBefore","payments","buySum","round","buy_valuation","buyOriginalSum","period","originDiffSum","diffSum","valuation","sum","originValuation","origin_valuation","originValuationWithCurrency","sign","getFactPercent","factPercent","getAnnuallyPercent","annuallyPercent"],"sources":["../../src/models/GridActive.js"],"sourcesContent":["import BaseModel from \"./BaseModel\";\r\nimport ActiveHelper from \"../helpers/Active\";\r\nimport InvestCalc from \"../helpers/InvestCalc\";\r\nimport BuyTrade from \"./BuyTrade\";\r\nimport SellTrade from \"./SellTrade\";\r\nimport Payment from \"./Payment\";\r\nimport moment from \"moment/moment\";\r\nimport ActiveValuer from \"./../helpers/Active/ActiveValuer\";\r\nimport Catalog from \"./Catalog\";\r\nimport {Money} from \"../helpers\";\r\n\r\nexport default class GridActive extends BaseModel\r\n{\r\n  /**\r\n   *\r\n   * @type {string}\r\n   */\r\n  controller = 'active';\r\n\r\n  related = {\r\n    'payments': {func: Payment.create, loaded: false},\r\n    'buy_trades': {func: BuyTrade.create, loaded: false},\r\n    'sell_trades': {func: SellTrade.create, loaded: false},\r\n    'item': {func: Catalog.create, loaded: false},\r\n    'trades': {loaded: false}\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {Array} attributes\r\n   */\r\n  constructor(attributes)\r\n  {\r\n    super();\r\n    this.attributes = attributes;\r\n\r\n    this.setGetters(attributes);\r\n  }\r\n\r\n  get avg_own_date_by_value()\r\n  {\r\n    if (this['tmp_avg_own_date_by_value'] === null || typeof this['tmp_avg_own_date_by_value'] === 'undefined')\r\n    {\r\n      let trades = this.buy_trades;\r\n\r\n      let date = null;\r\n      let value = 0;\r\n      if (trades.length)\r\n      {\r\n        trades.sort((a, b) => {\r\n          let dateA = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n          let dateB = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n          if (!dateA.isValid() || !dateB.isValid()) {\r\n            return 0; // если дата невалидна, считаем их равными\r\n          }\r\n          return dateA - dateB;\r\n        });\r\n\r\n        for (let i = 0; i < trades.length; i++)\r\n        {\r\n          let trade = trades[i];\r\n\r\n          if (trade.trade_at)\r\n          {\r\n            if (date)\r\n            {\r\n              //каждая следующая дата будет больше прошлой,\r\n              //поэтому всегда двигаемся вперед\r\n              //разница в днях\r\n              let tradeDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n\r\n              if(tradeDate.isValid())\r\n              {\r\n                let diffInDays = Math.abs(date.diff(tradeDate, 'days'));\r\n\r\n                //сумма объёмов\r\n                let sumValue = value + trade.count;\r\n                //пропорция\r\n                //из будущего объёма вычитаем текущий\r\n                let diffValue = trade.count - value;\r\n                //процентное соотношение к общему объёму\r\n                let percentValue = Math.abs(diffValue) / sumValue;\r\n                //среднее количество дней учитывая вес объема\r\n                let avgDays = diffInDays / 100 * percentValue;\r\n\r\n                //для следующей итерации сохраняем объём по текущей дате\r\n                value = sumValue;\r\n\r\n                if (diffValue > 0)\r\n                {\r\n                  date.add(avgDays, 'days');\r\n                } else\r\n                {\r\n                  let momentDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss').clone().startOf('day');\r\n\r\n                  if(momentDate.isValid())\r\n                  {\r\n                    date.add(avgDays, 'days');\r\n                  }\r\n                }\r\n              }\r\n            } else\r\n            {\r\n              value = trade.count;\r\n              let momentDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss').clone().startOf('day');\r\n\r\n              if(momentDate.isValid())\r\n              {\r\n                date = momentDate;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.attributes['tmp_avg_own_date_by_value'] = date ? date.format('DD.MM.YYYY') : '';\r\n    }\r\n\r\n    return this.attributes['tmp_avg_own_date_by_value'];\r\n  }\r\n\r\n\r\n  get avg_own_date()\r\n  {\r\n    if (this['tmp_avg_own_date'] === null || typeof this['tmp_avg_own_date'] === 'undefined')\r\n    {\r\n      let buyTrades = this.buy_trades;\r\n      let sellTrades = this.sell_trades;\r\n\r\n      let date = null;\r\n\r\n      buyTrades.sort((a, b) => {\r\n        let dateA = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        let dateB = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        if (!dateA.isValid() || !dateB.isValid()) {\r\n          return 0; // если дата невалидна, считаем их равными\r\n        }\r\n        return dateA - dateB;\r\n      });\r\n\r\n      sellTrades.sort((a, b) => {\r\n        let dateA = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        let dateB = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n        if (!dateA.isValid() || !dateB.isValid()) {\r\n          return 0; // если дата невалидна, считаем их равными\r\n        }\r\n        return dateA - dateB;\r\n      });\r\n\r\n      if (buyTrades?.length)\r\n      {\r\n        for (let i = 0; i < buyTrades.length; i++)\r\n        {\r\n          let trade = buyTrades[i];\r\n\r\n          date = ActiveHelper.getAvgDate(trade, date);\r\n        }\r\n\r\n        this['tmp_avg_own_date'] = date ? date.format('DD.MM.YYYY') : '';\r\n      }\r\n\r\n      if (sellTrades?.length)\r\n      {\r\n        for (let i = 0; i < sellTrades.length; i++)\r\n        {\r\n          let trade = sellTrades[i];\r\n\r\n          date = ActiveHelper.getAvgDate(trade, date);\r\n        }\r\n\r\n        this['tmp_avg_own_date'] = date ? date.format('DD.MM.YYYY') : '';\r\n      }\r\n    }\r\n\r\n    return this['tmp_avg_own_date'];\r\n  }\r\n\r\n  set avg_own_date(x)\r\n  {\r\n    this['tmp_avg_own_date'] = x;\r\n  }\r\n\r\n  get trades()\r\n  {\r\n    if (!this.related.trades.loaded)\r\n    {\r\n      this['tmp_trades'] = [];\r\n\r\n      if (this.attributes['sell_trades'] && this.attributes['sell_trades'].length)\r\n      {\r\n        this.attributes['sell_trades'].map((item) =>\r\n        {\r\n          let newTrade = SellTrade.create({...item});\r\n\r\n          this['tmp_trades'].push(newTrade)\r\n        });\r\n      }\r\n\r\n      if (this.attributes['buy_trades'] && this.attributes['buy_trades'].length)\r\n      {\r\n        this.attributes['buy_trades'].map((item) =>\r\n        {\r\n          let newTrade = BuyTrade.create({...item});\r\n\r\n          this['tmp_trades'].push(newTrade)\r\n        });\r\n      }\r\n\r\n      this['tmp_trades']?.sort((a, b) =>\r\n      {\r\n        let aDate = moment(a.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss')\r\n        let bDate = moment(b.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss')\r\n\r\n        if (a.active_id < b.active_id)\r\n        {\r\n          return -1;\r\n        }\r\n        if (b.active_id < a.active_id)\r\n        {\r\n          return 1;\r\n        }\r\n        if (aDate.isBefore(bDate))\r\n        {\r\n          return -1;\r\n        }\r\n        if (bDate.isBefore(aDate))\r\n        {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n\r\n      this.related.trades.loaded = true;\r\n    }\r\n\r\n    return this['tmp_trades'] ? this['tmp_trades'] : [];\r\n  }\r\n\r\n  set trades(x)\r\n  {\r\n    this['tmp_trades'] = x;\r\n  }\r\n\r\n  get payments()\r\n  {\r\n    if (!this.related.payments.loaded && this.attributes['payments'] && this.attributes['payments'].length)\r\n    {\r\n      this['tmp_payments'] = this.attributes['payments'].map((item) =>\r\n      {\r\n        return Payment.create(item);\r\n      });\r\n      this.related.payments.loaded = true;\r\n    }\r\n\r\n    return this['tmp_payments'] ? this['tmp_payments'] : [];\r\n  }\r\n\r\n  set payments(x)\r\n  {\r\n    this['tmp_payments'] = x;\r\n  }\r\n\r\n  get buy_trades()\r\n  {\r\n    if (!this.related.buy_trades.loaded && this.attributes['buy_trades'] && this.attributes['buy_trades'].length)\r\n    {\r\n      this['tmp_buy_trades'] = this.attributes['buy_trades'].map((item) =>\r\n      {\r\n        return new BuyTrade(item);\r\n      });\r\n      this.related.buy_trades.loaded = true;\r\n    }\r\n\r\n    return this['tmp_buy_trades'] ? this['tmp_buy_trades'] : [];\r\n  }\r\n\r\n  get sell_trades()\r\n  {\r\n    if (!this.related.sell_trades.loaded && this.attributes['sell_trades'] && this.attributes['sell_trades'].length)\r\n    {\r\n      this['tmp_sell_trades'] = this.attributes['sell_trades'].map((item) =>\r\n      {\r\n        return new SellTrade(item);\r\n      });\r\n      this.related.sell_trades.loaded = true;\r\n    }\r\n\r\n    return this['tmp_sell_trades'] ? this['tmp_sell_trades'] : [];\r\n  }\r\n\r\n  set sell_trades(x)\r\n  {\r\n    this['tmp_sell_trades'] = x;\r\n  }\r\n\r\n  get buySum()\r\n  {\r\n    //если сумма в миллионах, то копейки отбросим\r\n    let round = 2;\r\n    if(this.buy_valuation > 1000000){\r\n      round = 0;\r\n    }\r\n\r\n    return Money.format(this.buy_valuation, round);\r\n  }\r\n\r\n  get buyOriginalSum()\r\n  {\r\n    //если сумма в миллионах, то копейки отбросим\r\n    let round = 2;\r\n    if(this.buy_valuation > 1000000){\r\n      round = 0;\r\n    }\r\n\r\n    return Money.format(this.buy_valuation, round);\r\n  }\r\n\r\n  get period()\r\n  {\r\n    return this?.attributes?.period;\r\n  }\r\n\r\n  get originDiffSum()\r\n  {\r\n    //если сумма в миллионах, то копейки отбросим\r\n    let round = 2;\r\n    if(this?.attributes?.diff > 1000000 || this?.attributes?.diff < -1000000){\r\n      round = 0;\r\n    }\r\n\r\n    return Math.round(this?.attributes?.diff, round);\r\n  }\r\n\r\n  get diffSum()\r\n  {\r\n    //если сумма в миллионах, то копейки отбросим\r\n    let round = 2;\r\n    if(this?.attributes?.diff > 1000000 || this?.attributes?.diff < -1000000){\r\n      round = 0;\r\n    }\r\n\r\n    return Math.round(this?.attributes?.diff, round);\r\n  }\r\n\r\n  get valuation()\r\n  {\r\n    if(this.attributes.valuation)\r\n    {\r\n      //если сумма в миллионах, то копейки отбросим\r\n      let round = 2;\r\n      if(this.attributes?.valuation?.sum > 1000000 || this?.attributes?.valuation?.sum < -1000000){\r\n        round = 0;\r\n      }\r\n\r\n      return Math.round(this.attributes?.valuation?.sum, round);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  get originValuation()\r\n  {\r\n    if(this.attributes.origin_valuation)\r\n    {\r\n      //если сумма в миллионах, то копейки отбросим\r\n      let round = 2;\r\n      if(this.attributes?.origin_valuation?.sum > 1000000 || this?.attributes?.origin_valuation?.sum < -1000000){\r\n        round = 0;\r\n      }\r\n\r\n      return Math.round(this.attributes?.origin_valuation?.sum, round);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n\r\n  set originValuation(x)\r\n  {\r\n    this['tmp_originValuation'] = x;\r\n  }\r\n\r\n  get originValuationWithCurrency()\r\n  {\r\n    //проверим что в аттрибутах уже есть поле valuation или origin_valuation\r\n    if(this.attributes.origin_valuation)\r\n    {\r\n        return Money.format(this.attributes?.origin_valuation?.sum) + ' ' + this.attributes?.origin_valuation?.sign;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  async getFactPercent()\r\n  {\r\n\r\n  }\r\n\r\n  get factPercent()\r\n  {\r\n\r\n  }\r\n\r\n  set factPercent(x)\r\n  {\r\n    this['tmp_factPercent'] = x;\r\n  }\r\n\r\n  async getAnnuallyPercent()\r\n  {\r\n\r\n  }\r\n\r\n  get annuallyPercent()\r\n  {\r\n\r\n  }\r\n\r\n  set annuallyPercent(x)\r\n  {\r\n\r\n  }\r\n\r\n  set buy_trades(x)\r\n  {\r\n    this['tmp_buy_trades'] = x;\r\n  }\r\n\r\n  get item()\r\n  {\r\n    if (!this.related.item.loaded && this.attributes['item'])\r\n    {\r\n      this['tmp_item'] = new Catalog(this.attributes['item']);\r\n      this.related.item.loaded = true;\r\n    }\r\n\r\n    return this['tmp_item'] ? this['tmp_item'] : new Catalog({});\r\n  }\r\n}"],"mappings":"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"}