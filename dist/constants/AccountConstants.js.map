{"version":3,"file":"AccountConstants.js","names":["React","Money","ModelHelper","moment","ActiveConstants","CurrencyConstants","types","process","env","REACT_APP_ENV","AccountConstants","CASH","BANK_ACCOUNT","DIGIT_MONEY","BROKER_ACCOUNT","TEMP","TYPES","CURRENT","DEPOSIT","ALPHA_BANK","SBER_BANK","VTB_BANK","MOSCOW_CREDIT_BANK","OTKRITIE_BANK","ROS_SEL_HOZ_BANK","SOVCOM_BANK","RAIFFAIZEN_BANK","TINKOFF_BANK","HOME_CREDIT_BANK","ROS_BANK","CUSTOM_BANK","SBER_BROKER","VTB_BROKER","TINKOFF_BROKER","BCS_BROKER","ALPHA_BROKER","FINAM_BROKER","ATON_BROKER","ALOR_BROKER","OTKRITIE_BROKER","FREEDOM_BROKER","CUSTOM_BROKER","getBlockedSum","subAccount","blockedSum","blocked","length","map","sum","appendCurrencyActives","accounts","currency","preparedAccounts","index","filter","account","type_id","code","getCurrencyCodeById","currency_id","parseInt","date","accountId","id","convert","toDigits","cbCurrency","getCurrencyById","cb_currency","name","getCurrencyNameById","keyName","indexOf","push","key","newItem","CURRENCY","type_text","group_type_text","name_text","user_id","valuations","sell_trades","buy_trades","format","item","item_id","item_type","ticker","appendCurrencyGridActives","sign","getCurrencySignById","buyValuation","originValuation","valuation","factPercent","annualyPercent","diff","convertedSign","convertedCode","buy_valuation","origin_valuation","fact_percent","annualy_percent","getSubAccountById","subAccountId","i","n","getAccountBySubAccountId","items","textByTypeWithSum","number","getText","textByType","toLowerCase","system_name","getName","getType","getTypeById","type","variants","getVariantById","getSrc","require","default","bank_id","getImage","createElement","className","src","alt"],"sources":["../../src/constants/AccountConstants.js"],"sourcesContent":["import React from 'react';\r\nimport Money from '../helpers/Money'\r\nimport ModelHelper from \"../helpers/ModelHelper\";\r\nimport moment from \"moment/moment\";\r\nimport ActiveConstants from \"./ActiveConstants\";\r\nimport CurrencyConstants from \"./CurrencyConstants\";\r\n\r\nlet types = [\r\n  1,\r\n  2,\r\n  3,\r\n  4\r\n]\r\n\r\nif (process.env.REACT_APP_ENV === 'test')\r\n{\r\n  // types.push(5)\r\n}\r\n\r\n\r\nexport default class AccountConstants\r\n{\r\n  static CASH = 1;\r\n  static BANK_ACCOUNT = 2;\r\n  static DIGIT_MONEY = 3;\r\n  static BROKER_ACCOUNT = 4;\r\n  static TEMP = 5;\r\n\r\n  static TYPES = types;\r\n\r\n  static CURRENT = 1;\r\n  static DEPOSIT = 2;\r\n\r\n  static ALPHA_BANK = 1001;\r\n  static SBER_BANK = 1002;\r\n  static VTB_BANK = 1003;\r\n  static MOSCOW_CREDIT_BANK = 1004;\r\n  static OTKRITIE_BANK = 1005;\r\n  static ROS_SEL_HOZ_BANK = 1006;\r\n  static SOVCOM_BANK = 1007;\r\n  static RAIFFAIZEN_BANK = 1008;\r\n  static TINKOFF_BANK = 1009;\r\n  static HOME_CREDIT_BANK = 1010;\r\n  static ROS_BANK = 1011;\r\n  static CUSTOM_BANK = 2001;\r\n\r\n  static SBER_BROKER = 3001;\r\n  static VTB_BROKER = 3002;\r\n  static TINKOFF_BROKER = 3003;\r\n  static BCS_BROKER = 3004;\r\n  static ALPHA_BROKER = 3005;\r\n  static FINAM_BROKER = 3006;\r\n  static ATON_BROKER = 3007;\r\n  static ALOR_BROKER = 3008;\r\n  static OTKRITIE_BROKER = 3009;\r\n  static FREEDOM_BROKER = 3010;\r\n  static CUSTOM_BROKER = 4001;\r\n\r\n  /**\r\n   *\r\n   * @param subAccount\r\n   * @return {number}\r\n   */\r\n  static getBlockedSum(subAccount)\r\n  {\r\n    let blockedSum = 0;\r\n\r\n    if(subAccount?.blocked?.length)\r\n    {\r\n      subAccount?.blocked.map((blocked) => {\r\n        blockedSum += blocked.sum;\r\n      })\r\n    }\r\n\r\n    return blockedSum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param accounts\r\n   * @param currency\r\n   * @param courses\r\n   * @returns {*[]}\r\n   */\r\n  static appendCurrencyActives(accounts, currency)\r\n  {\r\n    let preparedAccounts = [];\r\n    let index = [];\r\n\r\n    accounts.filter((account) =>\r\n    {\r\n      return AccountConstants.BROKER_ACCOUNT === account.type_id;\r\n    }).map((account) =>\r\n    {\r\n      account.accounts.filter((subAccount) =>\r\n      {\r\n        let code = CurrencyConstants.getCurrencyCodeById(subAccount.currency_id)\r\n\r\n        switch (code)\r\n        {\r\n          case 'GLD':\r\n          case 'SLV':\r\n            return false;\r\n        }\r\n\r\n        return parseInt(subAccount.sum) !== 0;\r\n      }).map((subAccount) =>\r\n      {\r\n        let date = moment();\r\n\r\n        //объединяем все остатки по одному счету, если одна валюта, то субсчета просуммируются\r\n        let accountId = account.id;\r\n        let sum;\r\n\r\n        if(!currency || currency.id === 'none')\r\n        {\r\n          sum = subAccount.sum\r\n        }else{\r\n          sum = Money.convert(Money.toDigits(subAccount.sum), account.currency_id, currency.id);\r\n        }\r\n\r\n        // let cbCurrency = subAccount?.currency?.cb_currency;\r\n        let cbCurrency = CurrencyConstants.getCurrencyById(subAccount?.currency_id)?.cb_currency;\r\n\r\n        let code = CurrencyConstants.getCurrencyCodeById(subAccount.currency_id)\r\n        let name = CurrencyConstants.getCurrencyNameById(subAccount.currency_id)\r\n        let keyName = accountId + '-' + code + '-' + cbCurrency?.id;\r\n\r\n        if (index.indexOf(keyName) === -1)\r\n        {\r\n          index.push(keyName)\r\n\r\n          let key = index.indexOf(keyName);\r\n\r\n          let newItem = {};\r\n          switch (code)\r\n          {\r\n            case 'GLD':\r\n            case 'SLV':\r\n              // newItem = {\r\n              //   id: subAccount.id,\r\n              //   type_id: ActiveConstants.PRECIOUS_METAL,\r\n              //   type_text: 'Драгоценные металлы',\r\n              //   name_text: name,\r\n              //   user_id: account.user_id,\r\n              //   valuations: [],\r\n              //   sell_trades: [],\r\n              //   buy_trades: [\r\n              //     {\r\n              //       \"id\": null,\r\n              //       \"active_id\": subAccount.id,\r\n              //       \"from_account_id\": subAccount.id,\r\n              //       \"currency_id\": subAccount.currency_id,\r\n              //       \"type_id\": 1,\r\n              //       \"original_price\": 0,\r\n              //       \"price\": 0,\r\n              //       \"original_sum\": sum,\r\n              //       \"sum\": sum,\r\n              //       \"trade_at\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n              //       \"trade_at_date\": date.format('DD.MM.YYYY'),\r\n              //       \"trade_at_datetime\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n              //       \"count\": subAccount.sum,\r\n              //       \"morph\": \"active.trade\",\r\n              //       \"sum_course\": 1,\r\n              //       \"sum_rub_course\": 1,\r\n              //       \"price_course\": 1,\r\n              //       \"price_rub_course\": 1,\r\n              //       \"currency\": {\r\n              //         \"id\": 1,\r\n              //         \"name\": \"Российский рубль\",\r\n              //         \"code\": \"RUB\",\r\n              //         \"sign\": \"₽\",\r\n              //         \"order\": 1\r\n              //       },\r\n              //     }\r\n              //   ],\r\n              //   item: cbCurrency,\r\n              //   item_id: cbCurrency?.id,\r\n              //   item_type: cbCurrency?.ticker,\r\n              // }\r\n              //\r\n              // preparedAccounts[key] = newItem;\r\n              break;\r\n            default:\r\n              newItem = {\r\n                id: subAccount.id,\r\n                type_id: ActiveConstants.CURRENCY,\r\n                type_text: 'Валюта',\r\n                group_type_text: 'Валюта',\r\n                name_text: name,\r\n                user_id: account.user_id,\r\n                valuations: [],\r\n                sell_trades: [],\r\n                buy_trades: [\r\n                  {\r\n                    \"id\": null,\r\n                    \"active_id\": subAccount.id,\r\n                    \"from_account_id\": subAccount.id,\r\n                    \"currency_id\": subAccount.currency_id,\r\n                    \"type_id\": 1,\r\n                    \"original_price\": 0,\r\n                    \"price\": 0,\r\n                    \"original_sum\": sum,\r\n                    \"sum\": sum,\r\n                    \"trade_at\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n                    \"trade_at_date\": date.format('DD.MM.YYYY'),\r\n                    \"trade_at_datetime\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n                    \"count\": subAccount.sum,\r\n                    \"morph\": \"active.trade\",\r\n                    \"sum_course\": 1,\r\n                    \"sum_rub_course\": 1,\r\n                    \"price_course\": 1,\r\n                    \"price_rub_course\": 1,\r\n                    \"currency\": {\r\n                      \"id\": 1,\r\n                      \"name\": \"Российский рубль\",\r\n                      \"code\": \"RUB\",\r\n                      \"sign\": \"₽\",\r\n                      \"order\": 1\r\n                    },\r\n                  }\r\n                ],\r\n                item: cbCurrency,\r\n                item_id: cbCurrency?.id,\r\n                item_type: cbCurrency?.ticker,\r\n              }\r\n\r\n              preparedAccounts[key] = newItem;\r\n              break;\r\n          }\r\n        } else\r\n        {\r\n          let key = index.indexOf(keyName);\r\n\r\n          preparedAccounts[key]['buy_trades'][0]['original_sum'] += sum;\r\n          preparedAccounts[key]['buy_trades'][0]['sum'] += sum;\r\n          preparedAccounts[key]['buy_trades'][0]['count'] += subAccount.sum;\r\n        }\r\n      })\r\n    })\r\n\r\n    return preparedAccounts;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param accounts\r\n   * @param currency\r\n   * @returns {*[]}\r\n   */\r\n  static appendCurrencyGridActives(accounts, currency)\r\n  {\r\n    let preparedAccounts = [];\r\n    let index = [];\r\n\r\n    accounts.filter((account) =>\r\n    {\r\n      return AccountConstants.BROKER_ACCOUNT === account.type_id;\r\n    }).map((account) =>\r\n    {\r\n      account.accounts.filter((subAccount) =>\r\n      {\r\n        let code = CurrencyConstants.getCurrencyCodeById(subAccount.currency_id)\r\n\r\n        switch (code)\r\n        {\r\n          case 'GLD':\r\n          case 'SLV':\r\n            return false;\r\n        }\r\n\r\n        return parseInt(subAccount.sum) !== 0;\r\n      }).map((subAccount) =>\r\n      {\r\n        let date = moment();\r\n\r\n        let code = CurrencyConstants.getCurrencyCodeById(subAccount.currency_id)\r\n        let sign = CurrencyConstants.getCurrencySignById(subAccount.currency_id)\r\n        let name = CurrencyConstants.getCurrencyNameById(subAccount.currency_id)\r\n\r\n        //объединяем все остатки по одному счету, если одна валюта, то субсчета просуммируются\r\n        let accountId = account.id;\r\n        let buyValuation;\r\n        let originValuation;\r\n        let valuation;\r\n        let factPercent;\r\n        let annualyPercent;\r\n        let diff;\r\n        let sum;\r\n\r\n\r\n        if(currency.id === 'none')\r\n        {\r\n          sum = subAccount.sum;\r\n          buyValuation = sum;\r\n          originValuation = {\r\n            sum: sum,\r\n            sign: sign,\r\n            code: code,\r\n          };\r\n          diff = 0;\r\n          factPercent = 1;\r\n          annualyPercent = 0;\r\n        }else{\r\n          sum = Money.convert(Money.toDigits(subAccount.sum), currency.id, subAccount.currency_id)\r\n          let convertedSign = CurrencyConstants.getCurrencySignById(currency.id)\r\n          let convertedCode = CurrencyConstants.getCurrencyCodeById(currency.id)\r\n\r\n\r\n          buyValuation = sum;\r\n          valuation = {\r\n            sum: sum,\r\n            sign: convertedSign,\r\n            code: convertedCode\r\n          };\r\n          originValuation = {\r\n            sum: subAccount.sum,\r\n            sign: sign,\r\n            code: code\r\n          };\r\n\r\n          diff = 0;\r\n          factPercent = 1;\r\n          annualyPercent = 0;\r\n        }\r\n\r\n        // let cbCurrency = subAccount?.currency?.cb_currency;\r\n        let cbCurrency = CurrencyConstants.getCurrencyById(subAccount?.currency_id)?.cb_currency;\r\n\r\n        let keyName = accountId + '-' + code + '-' + cbCurrency?.id;\r\n\r\n        if (index.indexOf(keyName) === -1)\r\n        {\r\n          index.push(keyName)\r\n\r\n          let key = index.indexOf(keyName);\r\n\r\n          let newItem = {};\r\n          switch (code)\r\n          {\r\n            case 'GLD':\r\n            case 'SLV':\r\n              // newItem = {\r\n              //   id: subAccount.id,\r\n              //   type_id: ActiveConstants.PRECIOUS_METAL,\r\n              //   type_text: 'Драгоценные металлы',\r\n              //   name_text: name,\r\n              //   user_id: account.user_id,\r\n              //   valuations: [],\r\n              //   sell_trades: [],\r\n              //   buy_trades: [\r\n              //     {\r\n              //       \"id\": null,\r\n              //       \"active_id\": subAccount.id,\r\n              //       \"from_account_id\": subAccount.id,\r\n              //       \"currency_id\": subAccount.currency_id,\r\n              //       \"type_id\": 1,\r\n              //       \"original_price\": 0,\r\n              //       \"price\": 0,\r\n              //       \"original_sum\": sum,\r\n              //       \"sum\": sum,\r\n              //       \"trade_at\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n              //       \"trade_at_date\": date.format('DD.MM.YYYY'),\r\n              //       \"trade_at_datetime\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n              //       \"count\": subAccount.sum,\r\n              //       \"morph\": \"active.trade\",\r\n              //       \"sum_course\": 1,\r\n              //       \"sum_rub_course\": 1,\r\n              //       \"price_course\": 1,\r\n              //       \"price_rub_course\": 1,\r\n              //       \"currency\": {\r\n              //         \"id\": 1,\r\n              //         \"name\": \"Российский рубль\",\r\n              //         \"code\": \"RUB\",\r\n              //         \"sign\": \"₽\",\r\n              //         \"order\": 1\r\n              //       },\r\n              //     }\r\n              //   ],\r\n              //   item: cbCurrency,\r\n              //   item_id: cbCurrency?.id,\r\n              //   item_type: cbCurrency?.ticker,\r\n              // }\r\n              //\r\n              // preparedAccounts[key] = newItem;\r\n              break;\r\n            default:\r\n              newItem = {\r\n                id: subAccount.id,\r\n                type_id: ActiveConstants.CURRENCY,\r\n                type_text: 'Валюта',\r\n                group_type_text: 'Валюта',\r\n                name_text: name,\r\n                user_id: account.user_id,\r\n                valuations: [],\r\n                sell_trades: [],\r\n                buy_trades: [\r\n                  {\r\n                    \"id\": null,\r\n                    \"active_id\": subAccount.id,\r\n                    \"from_account_id\": subAccount.id,\r\n                    \"currency_id\": subAccount.currency_id,\r\n                    \"type_id\": 1,\r\n                    \"original_price\": 0,\r\n                    \"price\": 0,\r\n                    \"sum\": currency.id !== 'none' ? sum : subAccount.sum,\r\n                    \"original_sum\": subAccount.sum,\r\n                    \"trade_at\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n                    \"trade_at_date\": date.format('DD.MM.YYYY'),\r\n                    \"trade_at_datetime\": date.format('DD.MM.YYYY HH:mm:ss'),\r\n                    \"count\": subAccount.sum,\r\n                    \"morph\": \"active.trade\",\r\n                    \"sum_course\": 1,\r\n                    \"sum_rub_course\": 1,\r\n                    \"price_course\": 1,\r\n                    \"price_rub_course\": 1,\r\n                    \"currency\": {\r\n                      \"id\": 1,\r\n                      \"name\": \"Российский рубль\",\r\n                      \"code\": \"RUB\",\r\n                      \"sign\": \"₽\",\r\n                      \"order\": 1\r\n                    },\r\n                  }\r\n                ],\r\n                item: cbCurrency,\r\n                item_id: cbCurrency?.id,\r\n                item_type: cbCurrency?.ticker,\r\n                buy_valuation: buyValuation,\r\n                valuation: valuation,\r\n                origin_valuation: originValuation,\r\n                fact_percent: factPercent,\r\n                annualy_percent: annualyPercent,\r\n                diff: diff\r\n              }\r\n\r\n              preparedAccounts[key] = newItem;\r\n              break;\r\n          }\r\n        } else\r\n        {\r\n          let key = index.indexOf(keyName);\r\n\r\n          preparedAccounts[key]['buy_trades'][0]['original_sum'] += sum;\r\n          preparedAccounts[key]['buy_trades'][0]['sum'] += sum;\r\n          preparedAccounts[key]['buy_trades'][0]['count'] += subAccount.sum;\r\n        }\r\n      })\r\n    })\r\n\r\n    return preparedAccounts;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param subAccountId\r\n   * @param accounts\r\n   * @return {null}\r\n   */\r\n  static getSubAccountById(subAccountId, accounts = ModelHelper.accounts)\r\n  {\r\n    let account = null;\r\n\r\n    for (let i = 0; i < accounts.length; i++)\r\n    {\r\n      for (let n = 0; n < accounts[i].accounts.length; n++)\r\n      {\r\n        if (subAccountId === accounts[i].accounts[n].id)\r\n        {\r\n          account = accounts[i].accounts[n];\r\n        }\r\n      }\r\n    }\r\n\r\n    return account;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param subAccountId\r\n   * @param accounts\r\n   * @return {null}\r\n   */\r\n  static getAccountBySubAccountId(subAccountId, accounts = ModelHelper.accounts)\r\n  {\r\n    if (!subAccountId || !accounts)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let account = null;\r\n\r\n    for (let i = 0; i < accounts.length; i++)\r\n    {\r\n      for (let n = 0; n < accounts[i].accounts.length; n++)\r\n      {\r\n        if (subAccountId === accounts[i].accounts[n].id)\r\n        {\r\n          account = accounts[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return account;\r\n  }\r\n\r\n  static items(items)\r\n  {\r\n    return items.map((item) =>\r\n    {\r\n      return {id: item.id, name: AccountConstants.textByTypeWithSum(item)}\r\n    })\r\n  }\r\n\r\n  static textByTypeWithSum(item)\r\n  {\r\n    let currency = CurrencyConstants.getCurrencyById(item.currency_id)\r\n\r\n    let code = currency ? currency.code : '';\r\n\r\n    switch (item.type_id)\r\n    {\r\n      case AccountConstants.CASH:\r\n        return item.name + ' ' + Money.format(item.sum) + ' ' + code;\r\n      case AccountConstants.BANK_ACCOUNT:\r\n        return item.name + ' ' + item.number + ' - ' + Money.format(item.sum) + ' ' + code;\r\n      case AccountConstants.DIGIT_MONEY:\r\n        return item.name + ' ' + item.number + ' - ' + Money.format(item.sum) + ' ' + code;\r\n      case AccountConstants.BROKER_ACCOUNT:\r\n        return item.name + ' ' + item.number + ' - ' + Money.format(item.sum) + ' ' + code;\r\n      case AccountConstants.TEMP:\r\n        return item.name + ' ' + Money.format(item.sum) + ' ' + code;\r\n    }\r\n  }\r\n\r\n  static getText(subAccount)\r\n  {\r\n    let currency = CurrencyConstants.getCurrencyById(subAccount.currency_id)\r\n\r\n    return (subAccount.name ? subAccount.name : 'Счёт без названия') + ': ' + Money.format(subAccount.sum) + ' ' + currency.sign\r\n  }\r\n\r\n  static textByType(account)\r\n  {\r\n    switch (account.type_id)\r\n    {\r\n      case AccountConstants.CASH:\r\n        return 'Наличные';\r\n      case AccountConstants.BANK_ACCOUNT:\r\n        return 'Банковский счёт ' + (account.name ? account.name.toLowerCase() : '');\r\n      case AccountConstants.DIGIT_MONEY:\r\n        return (account.system_name ? account.system_name : 'Пользовательский счёт') + ' ' + (account.number ? account.number : '');\r\n      case AccountConstants.BROKER_ACCOUNT:\r\n        return 'Брокерский счёт ' + (account.name ? account.name.toLowerCase() : '');\r\n      case AccountConstants.TEMP:\r\n        return 'Временный счёт ' + (account.number ? account.number : '');\r\n    }\r\n\r\n    return '---'\r\n  }\r\n\r\n  static getName(subAccount)\r\n  {\r\n    return (subAccount && subAccount.name ? subAccount.name : 'Счёт без названия')\r\n  }\r\n\r\n  static getType(account)\r\n  {\r\n    switch (account.type_id)\r\n    {\r\n      case AccountConstants.CASH:\r\n        return 'Наличные ';\r\n      case AccountConstants.BANK_ACCOUNT:\r\n        return 'Банковский счёт ';\r\n      case AccountConstants.DIGIT_MONEY:\r\n        return 'Пользовательский счёт ';\r\n      case AccountConstants.BROKER_ACCOUNT:\r\n        return 'Брокерский счёт ';\r\n      case AccountConstants.TEMP:\r\n        return 'Временный счёт ';\r\n    }\r\n  }\r\n\r\n  static types()\r\n  {\r\n    return [\r\n      {id: AccountConstants.CASH, name: 'Наличный'},\r\n      {id: AccountConstants.BANK_ACCOUNT, name: 'Банковский'},\r\n      {id: AccountConstants.BROKER_ACCOUNT, name: 'Брокерский'},\r\n      {id: AccountConstants.DIGIT_MONEY, name: 'Пользовательский'},\r\n    ];\r\n  }\r\n\r\n  static getTypeById(id)\r\n  {\r\n    let type = null;\r\n\r\n    AccountConstants.types().map((item) =>\r\n    {\r\n      if (item.id === id)\r\n      {\r\n        type = item\r\n      }\r\n\r\n\r\n    });\r\n\r\n    return type;\r\n  }\r\n\r\n  static variants()\r\n  {\r\n    return [\r\n      {id: AccountConstants.CURRENT, name: 'Текущий'},\r\n      {id: AccountConstants.DEPOSIT, name: 'Депозит'},\r\n    ];\r\n  }\r\n\r\n  static getVariantById(id)\r\n  {\r\n    let type = null;\r\n\r\n    AccountConstants.TYPES.map((item) =>\r\n    {\r\n      if (item.id === id)\r\n      {\r\n        type = item\r\n      }\r\n\r\n\r\n    });\r\n\r\n    return type;\r\n  }\r\n\r\n  static getSrc(item)\r\n  {\r\n    if (item)\r\n    {\r\n      switch (item.type_id)\r\n      {\r\n        case AccountConstants.CASH:\r\n          return require('../assets/icons/cash.svg').default\r\n        case AccountConstants.BANK_ACCOUNT:\r\n          switch (item.bank_id)\r\n          {\r\n            case AccountConstants.ALPHA_BANK:\r\n              return require('../assets/banks/alfa.png')\r\n            case AccountConstants.SBER_BANK:\r\n              return require('../assets/banks/sber.png')\r\n            case AccountConstants.VTB_BANK:\r\n              return require('../assets/banks/vtb.png')\r\n            case AccountConstants.MOSCOW_CREDIT_BANK:\r\n              return require('../assets/banks/mkb.png')\r\n            case AccountConstants.OTKRITIE_BANK:\r\n              return require('../assets/banks/otkrytie.png')\r\n            case AccountConstants.ROS_SEL_HOZ_BANK:\r\n              return require('../assets/banks/rshb.png')\r\n            case AccountConstants.SOVCOM_BANK:\r\n              return require('../assets/banks/sovcom.png')\r\n            case AccountConstants.RAIFFAIZEN_BANK:\r\n              return require('../assets/banks/reiff.png')\r\n            case AccountConstants.TINKOFF_BANK:\r\n              return require('../assets/banks/tinkoff.png')\r\n            case AccountConstants.HOME_CREDIT_BANK:\r\n              return require('../assets/banks/home.png')\r\n            case AccountConstants.ROS_BANK:\r\n              return require('../assets/banks/rosbank.png')\r\n            default:\r\n              return require('../assets/icons/wallet.svg').default\r\n          }\r\n        case AccountConstants.BROKER_ACCOUNT:\r\n          switch (item.bank_id)\r\n          {\r\n            case AccountConstants.ALPHA_BROKER:\r\n              return require('../assets/banks/alfa.png')\r\n            case AccountConstants.SBER_BROKER:\r\n              return require('../assets/banks/sber.png')\r\n            case AccountConstants.VTB_BROKER:\r\n              return require('../assets/banks/vtb.png')\r\n            case AccountConstants.OTKRITIE_BROKER:\r\n              return require('../assets/banks/otkrytie.png')\r\n            case AccountConstants.TINKOFF_BROKER:\r\n              return require('../assets/banks/tinkoff.png')\r\n            case AccountConstants.BCS_BROKER:\r\n              return require('../assets/banks/bks.png')\r\n            case AccountConstants.FINAM_BROKER:\r\n              return require('../assets/banks/finam.png')\r\n            case AccountConstants.ATON_BROKER:\r\n              return require('../assets/banks/aton.png')\r\n            case AccountConstants.ALOR_BROKER:\r\n              return require('../assets/banks/alor.png')\r\n            case AccountConstants.FREEDOM_BROKER:\r\n              return require('../assets/banks/fridom.png')\r\n            default:\r\n              return require('../assets/icons/wallet.svg').default\r\n          }\r\n\r\n        case AccountConstants.DIGIT_MONEY:\r\n          return require('../assets/icons/wallet.svg').default\r\n        case AccountConstants.TEMP:\r\n          return require('../assets/icons/wallet.svg').default\r\n\r\n      }\r\n    }\r\n\r\n    return require('../assets/icons/cash.svg').default\r\n  }\r\n\r\n  static getImage(item)\r\n  {\r\n    if (item)\r\n    {\r\n      switch (item.type_id)\r\n      {\r\n        case AccountConstants.CASH:\r\n          return <img className='cash' src={require('../assets/icons/cash.svg').default} alt=''/>\r\n        case AccountConstants.BANK_ACCOUNT:\r\n          switch (item.bank_id)\r\n          {\r\n            case AccountConstants.ALPHA_BANK:\r\n              return <img className='bank' src={require('../assets/banks/alfa.png')} alt=''/>\r\n            case AccountConstants.SBER_BANK:\r\n              return <img className='bank' src={require('../assets/banks/sber.png')} alt=''/>\r\n            case AccountConstants.VTB_BANK:\r\n              return <img className='bank' src={require('../assets/banks/vtb.png')} alt=''/>\r\n            case AccountConstants.MOSCOW_CREDIT_BANK:\r\n              return <img className='bank' src={require('../assets/banks/mkb.png')} alt=''/>\r\n            case AccountConstants.OTKRITIE_BANK:\r\n              return <img className='bank' src={require('../assets/banks/otkrytie.png')} alt=''/>\r\n            case AccountConstants.ROS_SEL_HOZ_BANK:\r\n              return <img className='bank' src={require('../assets/banks/rshb.png')} alt=''/>\r\n            case AccountConstants.SOVCOM_BANK:\r\n              return <img className='bank' src={require('../assets/banks/sovcom.png')} alt=''/>\r\n            case AccountConstants.RAIFFAIZEN_BANK:\r\n              return <img className='bank' src={require('../assets/banks/reiff.png')} alt=''/>\r\n            case AccountConstants.TINKOFF_BANK:\r\n              return <img className='bank' src={require('../assets/banks/tinkoff.png')} alt=''/>\r\n            case AccountConstants.HOME_CREDIT_BANK:\r\n              return <img className='bank' src={require('../assets/banks/home.png')} alt=''/>\r\n            case AccountConstants.ROS_BANK:\r\n              return <img className='bank' src={require('../assets/banks/rosbank.png')} alt=''/>\r\n            default:\r\n              return <img className='user' src={require('../assets/icons/wallet.svg').default} alt=''/>\r\n          }\r\n        case AccountConstants.BROKER_ACCOUNT:\r\n          switch (item.bank_id)\r\n          {\r\n            case AccountConstants.ALPHA_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/alfa.png')} alt=''/>\r\n            case AccountConstants.SBER_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/sber.png')} alt=''/>\r\n            case AccountConstants.VTB_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/vtb.png')} alt=''/>\r\n            case AccountConstants.OTKRITIE_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/otkrytie.png')} alt=''/>\r\n            case AccountConstants.TINKOFF_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/tinkoff.png')} alt=''/>\r\n            case AccountConstants.BCS_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/bks.png')} alt=''/>\r\n            case AccountConstants.FINAM_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/finam.png')} alt=''/>\r\n            case AccountConstants.ATON_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/aton.png')} alt=''/>\r\n            case AccountConstants.ALOR_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/alor.png')} alt=''/>\r\n            case AccountConstants.FREEDOM_BROKER:\r\n              return <img className='bank' src={require('../assets/banks/fridom.png')} alt=''/>\r\n            default:\r\n              return <img className='user' src={require('../assets/icons/wallet.svg').default} alt=''/>\r\n          }\r\n\r\n        case AccountConstants.DIGIT_MONEY:\r\n          return <img className='user' src={require('../assets/icons/wallet.svg').default} alt=''/>\r\n        case AccountConstants.TEMP:\r\n          return <img className='user' src={require('../assets/icons/wallet.svg').default} alt=''/>\r\n\r\n      }\r\n    }\r\n  }\r\n}"],"mappings":"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"}