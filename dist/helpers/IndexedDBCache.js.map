{"version":3,"file":"IndexedDBCache.js","names":["IndexedDBCache","_db","_storeName","ensureDatabaseOpened","databaseName","storeName","openDatabase","catch","error","console","Promise","resolve","reject","request","indexedDB","open","onerror","event","errorMessage","target","Error","onupgradeneeded","db","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","_executeOperation","mode","operation","transaction","store","objectStore","set","key","value","expirationTimeInMs","sanitizedValue","JSON","parse","stringify","message","expirationTime","Date","now","data","put","get","delete","clearAll","clear","clearByPattern","pattern","openCursor","cursor","includes","continue","clearExpiredData","currentTime"],"sources":["../../src/helpers/IndexedDBCache.js"],"sourcesContent":["export default class IndexedDBCache {\r\n  static _db;\r\n  static _storeName;\r\n\r\n  /**\r\n   * Гарантирует, что база данных открыта.\r\n   * @param {string} databaseName\r\n   * @param {string} storeName\r\n   */\r\n  static async ensureDatabaseOpened(databaseName = 'AppStorage', storeName = 'DataStore') {\r\n    if (!this._db) {\r\n      await this.openDatabase(databaseName, storeName).catch(error => {\r\n        console.error(\"Ошибка при открытии БД:\", error);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Открывает IndexedDB и создаёт хранилище при необходимости.\r\n   * @param {string} databaseName\r\n   * @param {string} storeName\r\n   * @returns {Promise<void>}\r\n   */\r\n  static openDatabase(databaseName, storeName) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const request = indexedDB.open(databaseName, 1);\r\n\r\n        request.onerror = (event) => {\r\n          const errorMessage = 'Ошибка при открытии IndexedDB';\r\n          console.error(errorMessage, event.target.error);\r\n          reject(new Error(errorMessage));\r\n        };\r\n\r\n        request.onupgradeneeded = (event) => {\r\n          const db = event.target.result;\r\n          if (!db.objectStoreNames.contains(storeName)) {\r\n            db.createObjectStore(storeName, { keyPath: 'key' });\r\n          }\r\n        };\r\n\r\n        request.onsuccess = () => {\r\n          this._db = request.result;\r\n          this._storeName = storeName;\r\n          resolve();\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Ошибка в openDatabase:\", error);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Вспомогательный метод для выполнения операций с хранилищем.\r\n   * Обеспечивает создание транзакции, обработку ошибок и вызов переданной операции.\r\n   *\r\n   * @param {IDBTransactionMode} mode - режим транзакции ('readonly' или 'readwrite')\r\n   * @param {function} operation - функция, получающая (store, transaction, resolve, reject)\r\n   * @returns {Promise<any>}\r\n   */\r\n  static async _executeOperation(mode, operation) {\r\n    await this.ensureDatabaseOpened();\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const transaction = this._db.transaction([this._storeName], mode);\r\n        const store = transaction.objectStore(this._storeName);\r\n\r\n        // Назначаем обработку ошибок транзакции\r\n        transaction.onerror = (event) => {\r\n          console.error('Ошибка транзакции:', event.target.error);\r\n          reject(event.target.error);\r\n        };\r\n\r\n        operation(store, transaction, resolve, reject);\r\n      } catch (error) {\r\n        console.error(\"Ошибка в _executeOperation:\", error);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Сохраняет данные с указанием времени истечения.\r\n   * @param {string} key\r\n   * @param {*} value\r\n   * @param {number} expirationTimeInMs - время жизни в миллисекундах (по умолчанию 1 день)\r\n   * @returns {Promise<void>}\r\n   */\r\n  static async set(key, value, expirationTimeInMs = 1000 * 60 * 60 * 24) {\r\n    return this._executeOperation('readwrite', (store, transaction, resolve, reject) => {\r\n      let sanitizedValue;\r\n      try {\r\n        // Проверяем, что значение можно сериализовать\r\n        sanitizedValue = JSON.parse(JSON.stringify(value));\r\n      } catch (error) {\r\n        console.error(`Ошибка сериализации данных: ${error.message}`);\r\n        return reject(error);\r\n      }\r\n\r\n      const expirationTime = expirationTimeInMs ? Date.now() + expirationTimeInMs : null;\r\n      const data = { key, value: sanitizedValue, expirationTime };\r\n\r\n      const request = store.put(data);\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = (event) =>\r\n          reject(new Error(`Ошибка записи данных: ${event.target.error}`));\r\n    }).catch(error => {\r\n      console.error(\"Ошибка в методе set:\", error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Получает данные по ключу, если они не устарели.\r\n   * @param {string} key\r\n   * @returns {Promise<*>} значение или null\r\n   */\r\n  static async get(key) {\r\n    return this._executeOperation('readonly', (store, transaction, resolve, reject) => {\r\n      const request = store.get(key);\r\n      request.onsuccess = (event) => {\r\n        const data = event.target.result;\r\n        if (data && (!data.expirationTime || data.expirationTime > Date.now())) {\r\n          resolve(data.value);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => {\r\n        console.error(`Ошибка чтения данных: ${event.target.error}`);\r\n        resolve(null);\r\n      };\r\n    }).catch(error => {\r\n      console.error(\"Ошибка в методе get:\", error);\r\n      return null;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Удаляет запись по ключу.\r\n   * @param {string} key\r\n   * @returns {Promise<void>}\r\n   */\r\n  static async delete(key) {\r\n    return this._executeOperation('readwrite', (store, transaction, resolve, reject) => {\r\n      const request = store.delete(key);\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = (event) => {\r\n        console.error(`Ошибка удаления ключа \"${key}\":`, event.target.error);\r\n        resolve();\r\n      };\r\n    }).catch(error => {\r\n      console.error(\"Ошибка в методе delete:\", error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Очищает всё хранилище.\r\n   * @returns {Promise<void>}\r\n   */\r\n  static async clearAll() {\r\n    return this._executeOperation('readwrite', (store, transaction, resolve, reject) => {\r\n      const request = store.clear();\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = (event) =>\r\n          reject(new Error(`Ошибка очистки хранилища: ${event.target.error}`));\r\n    }).catch(error => {\r\n      console.error(\"Ошибка в методе clearAll:\", error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Удаляет записи, ключи которых содержат указанный паттерн.\r\n   * @param {string} pattern\r\n   * @returns {Promise<void>}\r\n   */\r\n  static async clearByPattern(pattern) {\r\n    return this._executeOperation('readwrite', (store, transaction, resolve, reject) => {\r\n      const request = store.openCursor();\r\n      request.onsuccess = (event) => {\r\n        const cursor = event.target.result;\r\n        if (cursor) {\r\n          if (cursor.key.includes(pattern)) {\r\n            cursor.delete();\r\n          }\r\n          cursor.continue();\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n      request.onerror = (event) =>\r\n          reject(new Error(`Ошибка при очистке по паттерну \"${pattern}\": ${event.target.error}`));\r\n    }).catch(error => {\r\n      console.error(\"Ошибка в методе clearByPattern:\", error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Удаляет устаревшие данные.\r\n   * @returns {Promise<void>}\r\n   */\r\n  static async clearExpiredData() {\r\n    return this._executeOperation('readwrite', (store, transaction, resolve, reject) => {\r\n      const currentTime = Date.now();\r\n      const request = store.openCursor();\r\n      request.onsuccess = (event) => {\r\n        const cursor = event.target.result;\r\n        if (cursor) {\r\n          const data = cursor.value;\r\n          if (data.expirationTime && data.expirationTime <= currentTime) {\r\n            cursor.delete();\r\n          }\r\n          cursor.continue();\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n      request.onerror = (event) =>\r\n          reject(new Error(`Ошибка при очистке устаревших данных: ${event.target.error}`));\r\n    }).catch(error => {\r\n      console.error(\"Ошибка в методе clearExpiredData:\", error);\r\n    });\r\n  }\r\n}"],"mappings":"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"}