{"version":3,"file":"Active.js","names":["moment","ActiveConstants","Api","ActiveModel","AccountConstants","Money","CurrencyConstants","Active","getName","item","isPackage","type_id","name_text","type_text","CUSTOM_PROPERTY","name","getGroup","items","stocks","map","group","key","id","groupKey","ticker","getRangesByValue","value","preparedValue","Math","abs","ranges","push","floor","getAvgDate","trade","date","trade_at_datetime","tradeDate","diffInDays","diff","add","clone","startOf","getCountSum","active","count","lotsize","getCountSumWithoutLotSize","getConfirmedPaymentsSum","payments","original","sum","length","payment","is_confirmed","original_sum","getConfirmedPaymentsOriginalSum","getPaymentsOriginalSum","getObligationCurrent","futureDate","paymentDate","paid_at_date","isBefore","code","getObligationLongTerm","birthDate","isSameOrAfter","getCodeAndSign","sign","last_valuation","getCurrencyCodeById","currency_id","getCurrencySignById","getCurrencyCodeByActive","getCurrencySignByActive","getNotNullPrice","array","field","i","getAccountsByDate","self","bindString","data","clientId","accountBanks","callback","query","get","setDomain","process","env","REACT_APP_API_WHITESWAN_URL","where","with","whereIn","all","bind","getBalanceByDate","state","accounts","currencyData","types","courses","brokerBalance","cashBalance","bankBalance","digitBalance","account","BROKER_ACCOUNT","convert","toDigits","CASH","BANK_ACCOUNT","DIGIT_MONEY","e","console","log","getActivesByDate","now","format","before","user_id","OBLIGATION","whereDate","whereDoesntHave","response","getInvestsByDate","exchange_valuation","with_convert_trade","profitability","CURRENCY","orWhere","DEPOSIT","DEBT","FUNDED_LIFE_INSURANCE","PACKAGE_GROUP","whereHas","orWhereHas","INVEST","orWhereNull","wherePropertyType","getPropertiesByDate","OWN","getSpendingsByDate","whereSpendingType","getObligationsByDate","whereObligationType","isRetire","user","year","startDate","retiredDate","birth_at_date","retired_age","deadDate","dead_age","isAfter","isSameOrBefore"],"sources":["../../src/helpers/Active.js"],"sourcesContent":["import moment from \"moment/moment\";\r\nimport ActiveConstants from \"../constants/ActiveConstants\";\r\nimport {Api} from \"laravel-request\";\r\nimport ActiveModel from \"../models/Active\";\r\nimport AccountConstants from \"../constants/AccountConstants\";\r\nimport Money from \"./Money\";\r\nimport CurrencyConstants from \"../constants/CurrencyConstants\";\r\n\r\nexport default class Active\r\n{\r\n  /**\r\n   *\r\n   * @param item\r\n   * @return {string|*|string}\r\n   */\r\n  static getName(item)\r\n  {\r\n    if (ActiveConstants.isPackage(item.type_id))\r\n    {\r\n      return (item.name_text ? item.name_text : 'Без названия');\r\n    }\r\n\r\n    if (item.type_text && item.name_text)\r\n    {\r\n      return item.type_text + ' ' + item.name_text;\r\n    }\r\n\r\n    if (item.type_text)\r\n    {\r\n      return item.type_text;\r\n    }\r\n\r\n    if (item.type_id === ActiveConstants.CUSTOM_PROPERTY)\r\n    {\r\n      return item.name;\r\n    }\r\n\r\n    return 'Без названия';\r\n  }\r\n\r\n  static getGroup(items)\r\n  {\r\n    let stocks = [];\r\n\r\n    items.map((group, key) =>\r\n    {\r\n      stocks[key] = {};\r\n      stocks[key].id = group.id;\r\n      stocks[key].name = group.name;\r\n      stocks[key].items = [];\r\n\r\n      group.items.map((item, groupKey) =>\r\n      {\r\n        stocks[key].items[groupKey] = {...item};\r\n        stocks[key].items[groupKey].id = item.id + '-' + item.type_id + (item.ticker ? '-' + item.ticker : '');\r\n      })\r\n    });\r\n\r\n    return stocks;\r\n  }\r\n\r\n  static getRangesByValue(value)\r\n  {\r\n    let preparedValue = value > 100 ? Math.abs(value) : 100;\r\n    let ranges = [];\r\n    if (preparedValue <= 500)\r\n    {\r\n      ranges.push(0);\r\n      ranges.push(preparedValue);\r\n      ranges.push(preparedValue);\r\n      ranges.push(preparedValue);\r\n    } else if (preparedValue <= 1500)\r\n    {\r\n      ranges.push(0);\r\n      ranges.push(500);\r\n      ranges.push(Math.floor(preparedValue));\r\n      ranges.push(Math.floor(preparedValue));\r\n    } else\r\n    {\r\n      ranges.push(0);\r\n      ranges.push(Math.floor(preparedValue / 100 * 30));\r\n      ranges.push(Math.floor(preparedValue / 100 * 30) + Math.floor(preparedValue / 100 * 30));\r\n      ranges.push(Math.floor(preparedValue / 100 * 30) + Math.floor(preparedValue / 100 * 30) + Math.floor(preparedValue / 100 * 40));\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n\r\n  static getAvgDate(trade, date = null)\r\n  {\r\n    if (trade.trade_at_datetime) {\r\n      let tradeDate = moment(trade.trade_at_datetime, 'DD.MM.YYYY HH:mm:ss');\r\n      if (date) {\r\n        let diffInDays = tradeDate.diff(date, 'days');\r\n        return date.add(diffInDays / 2, 'days');\r\n      } else {\r\n        return tradeDate.clone().startOf('day');\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param active\r\n   * @param {Object[]} items\r\n   * @returns {*}\r\n   */\r\n  static getCountSum(active, items)\r\n  {\r\n    let count = 0;\r\n    let lotsize = active.item ? active.item.lotsize : 1;\r\n\r\n    items.map((trade) =>\r\n    {\r\n      count += trade.count;\r\n    });\r\n\r\n    return count * lotsize;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param active\r\n   * @param {Object[]} items\r\n   * @returns {*}\r\n   */\r\n  static getCountSumWithoutLotSize(active, items)\r\n  {\r\n    let count = 0;\r\n\r\n    items.map((trade) =>\r\n    {\r\n      count += trade.count;\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param payments\r\n   * @returns {number}\r\n   */\r\n  static getConfirmedPaymentsSum(payments, original = false)\r\n  {\r\n    let sum = 0;\r\n    if (payments?.length)\r\n    {\r\n      payments.map((payment) =>\r\n      {\r\n        if (payment.is_confirmed)\r\n        {\r\n          sum += original ? payment.original_sum : payment.sum;\r\n        }\r\n      });\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param payments\r\n   * @returns {number}\r\n   */\r\n  static getConfirmedPaymentsOriginalSum(payments)\r\n  {\r\n    return this.getConfirmedPaymentsSum(payments, true)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param payments\r\n   * @returns {number}\r\n   */\r\n  static getPaymentsOriginalSum(payments)\r\n  {\r\n    let sum = 0;\r\n    if (payments.length)\r\n    {\r\n      payments.map((payment) =>\r\n      {\r\n        sum += payment.original_sum;\r\n\r\n\r\n      });\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  static getObligationCurrent(item, date)\r\n  {\r\n    let sum = 0;\r\n    let futureDate = date.clone().add('12', 'months').startOf('day');\r\n\r\n    item.payments.map((payment) =>\r\n    {\r\n      let paymentDate = moment(payment.paid_at_date, 'DD.MM.YYYY').startOf('day');\r\n\r\n      if (payment.is_confirmed === false && paymentDate.isBefore(futureDate))\r\n      {\r\n        sum += Math.abs(payment.sum);\r\n      }\r\n    });\r\n\r\n    return {sum: sum, code: ''};\r\n  }\r\n\r\n  static getObligationLongTerm(item, date, birthDate)\r\n  {\r\n    let sum = 0;\r\n    let count = 0;\r\n    let futureDate = date.clone().add('12', 'months').startOf('day');\r\n\r\n    item.payments.map((payment) =>\r\n    {\r\n      let paymentDate = moment(payment.paid_at_date, 'DD.MM.YYYY').startOf('day');\r\n\r\n      if (payment.is_confirmed === false && paymentDate.isSameOrAfter(futureDate))\r\n      {\r\n        sum += Math.abs(payment.sum);\r\n        count++\r\n      }\r\n    });\r\n\r\n    return {sum: sum, code: ''};\r\n  }\r\n\r\n  static getCodeAndSign(item)\r\n  {\r\n    let code = '';\r\n    let sign = '';\r\n\r\n    if (item.last_valuation)\r\n    {\r\n      code = CurrencyConstants.getCurrencyCodeById(item.last_valuation.currency_id);\r\n      sign = CurrencyConstants.getCurrencySignById(item.last_valuation.currency_id);\r\n    }\r\n\r\n    if (!code && !sign)\r\n    {\r\n      code = CurrencyConstants.getCurrencyCodeByActive(item);\r\n      sign = CurrencyConstants.getCurrencySignByActive(item);\r\n    }\r\n    return {code, sign};\r\n  }\r\n\r\n  /**\r\n   * метод для того чтобы если были переводы на счёт, то цена внесения 0 будет, получается\r\n   * что это будет учитываться при оценке, нужно это исключить, проверкой > 0\r\n   * @param array\r\n   * @param field\r\n   * @returns {number|*}\r\n   */\r\n  static getNotNullPrice(array, field)\r\n  {\r\n    for (let i = array.length - 1; i >= 0; i--)\r\n    {\r\n      if (array[i][field] > 0)\r\n      {\r\n        return array[i][field];\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param self\r\n   * @param bindString\r\n   * @param data\r\n   * @param clientId\r\n   * @param accountBanks\r\n   * @param date\r\n   * @param callback\r\n   */\r\n  static getAccountsByDate(self, bindString, data, clientId, accountBanks = [], date = moment(), callback)\r\n  {\r\n    let query = Api.get('user-account', 'index', data)\r\n      .setDomain(process.env.REACT_APP_API_WHITESWAN_URL)\r\n      .where('user_id', clientId)\r\n      .where('is_visible', 1)\r\n      .with('accounts', 'accounts.currency', 'accounts.currency.cb_currency', 'accounts.blocked');\r\n\r\n    if (accountBanks.length)\r\n    {\r\n      query.whereIn('bank_id', accountBanks);\r\n    }\r\n\r\n    query\r\n      .all(() =>\r\n      {\r\n        callback()\r\n      })\r\n      .bind(self, bindString)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param state\r\n   * @param accounts\r\n   * @param currencyData\r\n   * @param clientId\r\n   * @param accountBanks\r\n   * @param date\r\n   * @param callback\r\n   * @param types\r\n   * @param courses\r\n   */\r\n  static getBalanceByDate(state, accounts, currencyData, clientId, accountBanks = [], date = moment(), callback, types, courses)\r\n  {\r\n      state.brokerBalance = {};\r\n      state.cashBalance = {};\r\n      state.bankBalance = {};\r\n      state.digitBalance = {};\r\n      state.brokerBalance.sum = 0;\r\n      state.cashBalance.sum = 0;\r\n      state.bankBalance.sum = 0;\r\n      state.digitBalance.sum = 0;\r\n      accounts.map((item) =>\r\n      {\r\n        item.accounts.map((account) =>\r\n        {\r\n          try\r\n          {\r\n            if (account.sum > 0)\r\n            {\r\n              switch (item.type_id)\r\n              {\r\n                case AccountConstants.BROKER_ACCOUNT:\r\n                  state.brokerBalance.sum += Money.convert(Money.toDigits(account.sum), currencyData.currency_id, account.currency_id);\r\n                  break;\r\n                case AccountConstants.CASH:\r\n                  state.cashBalance.sum += Money.convert(Money.toDigits(account.sum), currencyData.currency_id, account.currency_id);\r\n                  break;\r\n                case AccountConstants.BANK_ACCOUNT:\r\n                  state.bankBalance.sum += Money.convert(Money.toDigits(account.sum), currencyData.currency_id, account.currency_id);\r\n                  break;\r\n                case AccountConstants.DIGIT_MONEY:\r\n                  state.digitBalance.sum += Money.convert(Money.toDigits(account.sum), currencyData.currency_id, account.currency_id);\r\n                  break;\r\n              }\r\n            }\r\n          } catch (e)\r\n          {\r\n            console.log(e)\r\n          }\r\n        })\r\n      });\r\n\r\n      if (typeof callback === 'function')\r\n      {\r\n        callback();\r\n      }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param state\r\n   * @param bindString\r\n   * @param data\r\n   * @param clientId\r\n   * @param accountBanks\r\n   * @param date\r\n   * @param callback\r\n   */\r\n  static getActivesByDate(state, bindString, data, clientId, accountBanks = [], date = moment(), callback)\r\n  {\r\n    let now = date.clone().format('YYYY-MM-DD HH:mm:ss');\r\n    let before = date.clone().add('12', 'months').format('YYYY-MM-DD HH:mm:ss');\r\n\r\n    data.user_id = clientId;\r\n\r\n    Api.get('active', 'index', data)\r\n      .setDomain(process.env.REACT_APP_API_WHITESWAN_URL)\r\n      .where((query) =>\r\n      {\r\n        return query.where('type_id', ActiveConstants.OBLIGATION)\r\n          .whereDate('sell_at', '<=', before)\r\n          .whereDoesntHave('sell_trades', (query) =>\r\n          {\r\n            return query.whereDate('trade_at', '<=', now);\r\n          })\r\n      })\r\n      .with('buy_currency')\r\n      .with('sell_currency')\r\n      .with('income_currency')\r\n      .with('buy_account')\r\n      .with('sell_account')\r\n      .with('income_account')\r\n      .with('valuations')//TODO\r\n      .with('payments', 'payments.currency')\r\n      .with('buy_trades', (query) =>\r\n      {\r\n        return query\r\n          .with('currency', 'commissions')\r\n          .where('trade_at', '<=', now);\r\n      })\r\n      .with('sell_trades', (query) =>\r\n      {\r\n        return query\r\n          .with('currency', 'commissions')\r\n          .where('trade_at', '<=', now);\r\n      })\r\n      .with('dividends')\r\n      .all((response) =>\r\n      {\r\n        state[bindString] = response.data;\r\n\r\n        callback()\r\n      });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param state\r\n   * @param accounts\r\n   * @param bindString\r\n   * @param data\r\n   * @param clientId\r\n   * @param accountBanks\r\n   * @param date\r\n   * @param callback\r\n   */\r\n  static getInvestsByDate(state, accounts, bindString, data, clientId, accountBanks = [], date = moment(), callback)\r\n  {\r\n    let now = date.clone().format('YYYY-MM-DD HH:mm:ss');\r\n    let before = date.clone().add('12', 'months').format('YYYY-MM-DD HH:mm:ss');\r\n\r\n    data.user_id = clientId;\r\n    data.exchange_valuation = 1;\r\n    data.with_convert_trade = 1;\r\n    data.profitability = 1;\r\n\r\n    Api.get('active', 'invest-grid-index', data)\r\n      .setDomain(process.env.REACT_APP_API_WHITESWAN_URL)\r\n      .where('type_id', '!=', ActiveConstants.CURRENCY)\r\n      .where((query) => {\r\n        return query.orWhere((query) =>\r\n        {\r\n          return query.whereIn('type_id', [\r\n            ActiveConstants.DEPOSIT,\r\n            ActiveConstants.DEBT,\r\n            ActiveConstants.FUNDED_LIFE_INSURANCE,\r\n          ])\r\n        })\r\n          .orWhere((query) =>\r\n          {\r\n            query.whereIn('type_id', ActiveConstants.PACKAGE_GROUP)\r\n              .whereDoesntHave('sell_trades', (query) =>\r\n              {\r\n                return query.whereDate('trade_at', '<=', now);\r\n              })\r\n\r\n            if(accountBanks.length)\r\n            {\r\n              query.whereHas('buy_trades.from_account.user_account', (query) => {\r\n                return query.whereIn('bank_id', accountBanks);\r\n              })\r\n                .orWhereHas('buy_trades.to_account.user_account', (query) => {\r\n                  return query.whereIn('bank_id', accountBanks);\r\n                })\r\n            }\r\n\r\n            return query;\r\n          })\r\n          .orWhere((query) =>\r\n          {\r\n            return query.where('group_id', ActiveConstants.INVEST)\r\n              .whereDate('buy_at', '<=', before)\r\n              .where((query) =>\r\n              {\r\n                return query.where('sell_at', '>', now)\r\n                  .orWhereNull('sell_at')\r\n                  .whereDoesntHave('sell');\r\n              })\r\n              .wherePropertyType(true)\r\n          })\r\n      })\r\n      .all((response) =>\r\n      {\r\n        state[bindString] = response.data;\r\n\r\n        // let items = AccountConstants.appendCurrencyActives(accounts, {id: CurrencyConstants.RUBBLE_ID, name: 'RUB'});\r\n        //\r\n        // items = items.map((item) => {\r\n        //   if(item.type_id === ActiveConstants.CURRENCY)\r\n        //   {\r\n        //     item.name_text = 'Свободные денежные средства';\r\n        //   }\r\n        //\r\n        //   return new ActiveModel(item);\r\n        // })\r\n\r\n        // state[bindString] = [...items, ...state[bindString]];\r\n\r\n        callback()\r\n      });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param state\r\n   * @param bindString\r\n   * @param data\r\n   * @param clientId\r\n   * @param accountBanks\r\n   * @param date\r\n   * @param callback\r\n   */\r\n  static getPropertiesByDate(state, bindString, data, clientId, accountBanks = [], date = moment(), callback)\r\n  {\r\n    let now = date.clone().format('YYYY-MM-DD HH:mm:ss');\r\n\r\n    data.user_id = clientId;\r\n\r\n    Api.get('active', 'index', data)\r\n      .setDomain(process.env.REACT_APP_API_WHITESWAN_URL)\r\n      .where('buy_at', '<=', now)\r\n      .where((query) =>\r\n      {\r\n        return query.where('sell_at', '>', now)\r\n          .orWhereNull('sell_at')\r\n          .whereDoesntHave('sell')\r\n      })\r\n      .where('group_id', ActiveConstants.OWN)\r\n      .wherePropertyType(true)\r\n      .with('sell_trades')\r\n      .with('valuations')\r\n      .with('buy_currency')\r\n      .with('sell_currency')\r\n      .with('income_currency')\r\n      .with('buy_account')\r\n      .with('sell_account')\r\n      .with('income_account')\r\n      .all((response) =>\r\n      {\r\n          state[bindString] = response.data;\r\n\r\n          callback()\r\n      });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param state\r\n   * @param bindString\r\n   * @param data\r\n   * @param clientId\r\n   * @param date\r\n   * @param callback\r\n   */\r\n  static getSpendingsByDate(state, bindString, data, clientId, date = moment(), callback)\r\n  {\r\n    data.user_id = clientId;\r\n\r\n    Api.get('active', 'index', data)\r\n      .setDomain(process.env.REACT_APP_API_WHITESWAN_URL)\r\n      .where('buy_at', '<=', date.format('YYYY-MM-DD HH:mm:ss'))\r\n      .whereSpendingType(true)\r\n      .with('sell_trades')\r\n      .with('valuations')\r\n      .with('buy_currency')\r\n      .with('sell_currency')\r\n      .with('income_currency')\r\n      .with('buy_account')\r\n      .with('sell_account')\r\n      .with('income_account')\r\n      .with('payments')\r\n      .all(({data}) =>\r\n      {\r\n        state[bindString] = data;\r\n\r\n        callback()\r\n      });\r\n  }\r\n\r\n  static getObligationsByDate(state, bindString, data, clientId, accountBanks = [], date = moment(), callback)\r\n  {\r\n    data.user_id = clientId;\r\n\r\n    Api.get('active', 'invest-grid-index', data)\r\n      .setDomain(process.env.REACT_APP_API_WHITESWAN_URL)\r\n      .where('buy_at', '<=', date.format('YYYY-MM-DD HH:mm:ss'))\r\n      .whereObligationType(true)\r\n      .with('buy_currency')\r\n      .with('sell_currency')\r\n      .with('income_currency')\r\n      .with('buy_account')\r\n      .with('sell_account')\r\n      .with('income_account')\r\n      .with('payments')\r\n      .all((response) =>\r\n      {\r\n        state[bindString] = response.data;\r\n\r\n        callback()\r\n      });\r\n  }\r\n\r\n  static isRetire(user, year)\r\n  {\r\n    let startDate = moment(year, 'YYYY').startOf('year');\r\n    let retiredDate = moment(user.birth_at_date, 'DD.MM.YYYY').add(user.retired_age, 'year')\r\n    let deadDate = moment(user.birth_at_date, 'DD.MM.YYYY').add(user.retired_age, 'year').add(user.dead_age, 'year')\r\n\r\n    if (startDate.isAfter(retiredDate) && startDate.isSameOrBefore(deadDate))\r\n    {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}