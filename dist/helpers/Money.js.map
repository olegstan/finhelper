{"version":3,"file":"Money.js","names":["moment","ActiveConstants","CurrencyConstants","exactMath","Money","formatForInput","amount","decimalCount","decimalSign","thousands","__ret","getDecimal","negativeSign","amountInt","parseInt","Math","abs","Number","toFixed","toString","amountFloat","j","length","substr","replace","slice","e","console","error","isNaN","format","parseFloat","Error","isFinite","absAmount","strVal","intPart","fractionPart","split","result","num","fix","decimalIndex","indexOf","trunc","substring","toThousands","space","isNegative","preparedAmount","getAccumulatedCouponIncome","startDate","endDate","nominal","rate","ratePeriodTypeId","nowDate","period","delimiter","DAILY","WEEKLY","MONTHLY","QUARTER","HALFYEAR","YEARLY","periodDays","diff","couponDiffDays","toDigits","sum","getCourseByCurrencyId","courses","id","course","map","item","cb_currency","currency","convert","fromCurrencyId","toCurrencyId","fromCurrencyCourse","toCurrencyCourse","RUBBLE_ID","value","warn","message"],"sources":["../../src/helpers/Money.js"],"sourcesContent":["import moment from \"moment/moment\";\r\nimport ActiveConstants from \"../constants/ActiveConstants\";\r\nimport CurrencyConstants from \"../constants/CurrencyConstants\";\r\nimport exactMath from \"exact-math\";\r\n\r\nexport default class Money\r\n{\r\n  static formatForInput(amount, decimalCount = 2, decimalSign = \".\", thousands = \" \")\r\n  {\r\n    try\r\n    {\r\n      if (amount === '')\r\n      {\r\n        return '';\r\n      }\r\n\r\n      const __ret = Money.getDecimal(decimalCount, amount);\r\n      decimalCount = __ret.decimalCount;\r\n      const negativeSign = __ret.negativeSign;\r\n\r\n      let amountInt = parseInt(amount = Math.abs(Number(amount) || '').toFixed(decimalCount)).toString();\r\n      let amountFloat = Math.abs(amount - amountInt);\r\n\r\n      let j = (amountInt.length > 3) ? amountInt.length % 3 : 0;\r\n\r\n      return (negativeSign + (j ? amountInt.substr(0, j) + thousands : '') + amountInt.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimalSign + amountFloat.toFixed(decimalCount).slice(2) : \"\"));\r\n    } catch (e)\r\n    {\r\n      console.error(e)\r\n      return '';\r\n    }\r\n  }\r\n\r\n  static getDecimal(decimalCount, amount)\r\n  {\r\n    decimalCount = Math.abs(decimalCount);\r\n    decimalCount = isNaN(decimalCount) ? '' : decimalCount;\r\n\r\n    const negativeSign = amount < 0 ? \"-\" : \"\";\r\n    return {decimalCount, negativeSign};\r\n  }\r\n\r\n//TODO написать проверку, если цифра заканчивается на больше e+20, такие числа toFixed не может правильно обработать\r\n  static format = (amount, decimalCount = 2, decimalSign = \".\", thousands = \" \") =>\r\n  {\r\n    try\r\n    {\r\n// 1) Переводим входные данные в число\r\n      if (typeof amount === 'number') {\r\n        // Если уже число, переведём в строку для единообразия\r\n        amount = amount.toString();\r\n      }\r\n      if (typeof amount === 'string') {\r\n        // Заменяем запятые на точки, убираем лишние пробелы\r\n        amount = parseFloat(amount.replace(/,/g, '.').replace(/ /g, ''));\r\n      }\r\n\r\n      // 2) Спец. случаи\r\n      if (amount === '') {\r\n        return '';\r\n      }\r\n      if (amount === 0) {\r\n        // Явный ноль (считаем, что хотим вернуть \"0\" как строку)\r\n        return '0';\r\n      }\r\n      if (isNaN(amount)) {\r\n        // Ошибка, число не распарсилось\r\n        try {\r\n          throw new Error('Error number is NaN');\r\n        } catch (e) {\r\n          // console.warn(e.stack);\r\n        }\r\n        return '0';\r\n      }\r\n      if (!isFinite(amount)) {\r\n        // Бесконечность\r\n        return '∞';\r\n      }\r\n\r\n      // 3) Определяем знак и работаем с модулем числа\r\n      const negativeSign = amount < 0 ? \"-\" : \"\";\r\n      const absAmount = Math.abs(amount);\r\n\r\n      // 4) \"Округляем\" или \"обрезаем\" дробную часть с помощью toFixed,\r\n      //    чтобы число точно не ушло в экспоненциальный формат (e.g. 1e-7).\r\n      //    Сразу получим строку обычного формата (без экспоненты).\r\n      let strVal = absAmount.toFixed(decimalCount);\r\n      // например, при decimalCount=2 из 1234.5678 получим \"1234.57\"\r\n      // а из 1e-7 при decimalCount=7 получим \"0.0000001\"\r\n\r\n      // 5) Разделяем целую и дробную части\r\n      let [intPart, fractionPart] = strVal.split('.');\r\n\r\n      // 6) Убираем хвостовые нули из дробной части\r\n      if (fractionPart) {\r\n        fractionPart = fractionPart.replace(/0+$/, '');\r\n      }\r\n\r\n      // 7) Формируем группу тысяч в целой части\r\n      //    (т.е. 12345 -> \"12 345\", если thousands=\" \")\r\n      if (intPart.length > 3) {\r\n        const j = intPart.length % 3;\r\n        // кусочек от начала, если он не кратен 3, плюс регулярка для остального\r\n        intPart = (j ? intPart.slice(0, j) + thousands : '')\r\n            + intPart.slice(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands);\r\n      }\r\n\r\n      // 8) Склеиваем результат: знак + целая часть + (точка + дробная часть) если есть\r\n      let result = negativeSign + intPart;\r\n      if (fractionPart) {\r\n        result += decimalSign + fractionPart;\r\n      }\r\n\r\n      return result;\r\n    } catch (e)\r\n    {\r\n      console.error(e)\r\n      return '';\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param num\r\n   * @param fix\r\n   * @return {string|*}\r\n   */\r\n  static toFixed(num, fix)\r\n  {\r\n    if (typeof num === 'number')\r\n    {\r\n      num = num.toString();\r\n    }\r\n\r\n    if (typeof num === 'string')\r\n    {\r\n      let decimalIndex = num.toString().indexOf('.');\r\n\r\n      // Если десятичная точка не найдена, выводим исходное число\r\n      if (decimalIndex === -1)\r\n      {\r\n        return num.replace('.', '');//удалим точку\r\n      } else\r\n      {\r\n        if (fix === 0)\r\n        {\r\n          return Math.trunc(num).toString();\r\n        }\r\n\r\n        // Получаем подстроку числа, включая нужное количество знаков после точки\r\n        return num.toString().substring(0, decimalIndex + fix + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param amount\r\n   * @param fix\r\n   * @param space\r\n   * @return {*|string}\r\n   */\r\n  static toThousands(amount, fix = 2, space = '') {\r\n    const isNegative = amount < 0;\r\n    let preparedAmount = Math.abs(amount);\r\n\r\n    let result;\r\n    if (preparedAmount >= 1000000000) {\r\n      result = Money.toFixed(preparedAmount / 1000000000, fix) + space + 'B';\r\n    } else if (preparedAmount >= 1000000) {\r\n      result = Money.toFixed(preparedAmount / 1000000, fix) + space + 'M';\r\n    } else if (preparedAmount >= 1000) {\r\n      result = Money.toFixed(preparedAmount / 1000, fix) + space + 'K';\r\n    } else {\r\n      result = Money.toFixed(preparedAmount, fix);\r\n    }\r\n\r\n    return isNegative ? '-' + result : result;\r\n  }\r\n\r\n  static getAccumulatedCouponIncome(startDate, endDate, nominal, rate, ratePeriodTypeId)\r\n  {\r\n    let nowDate = moment();\r\n    let period = 0;\r\n    let delimiter = 0;\r\n    switch (ratePeriodTypeId)\r\n    {\r\n      case ActiveConstants.DAILY:\r\n\r\n        break;\r\n      case ActiveConstants.WEEKLY:\r\n\r\n        break;\r\n      case ActiveConstants.MONTHLY:\r\n        period = 1;\r\n        delimiter = 12;\r\n        break;\r\n      case ActiveConstants.QUARTER:\r\n        period = 3;\r\n        delimiter = 4;\r\n        break;\r\n      case ActiveConstants.HALFYEAR:\r\n        period = 6;\r\n        delimiter = 2;\r\n        break;\r\n      case ActiveConstants.YEARLY:\r\n        period = 12;\r\n        delimiter = 1;\r\n        break;\r\n    }\r\n\r\n    let periodDays = Math.abs(startDate.diff(endDate, 'days', true));\r\n    let couponDiffDays = Math.abs(startDate.diff(nowDate, 'days'));\r\n\r\n    return (nominal * (rate / 100 / delimiter) / periodDays) * couponDiffDays;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param sum\r\n   * @returns {number}\r\n   */\r\n  static toDigits(sum)\r\n  {\r\n    if (typeof sum === 'number')\r\n    {\r\n      sum = sum.toString();\r\n    }\r\n\r\n    if (typeof sum === 'string')\r\n    {\r\n      return parseFloat(sum.replace(/,/g, '.').replace(/ /g, ''));\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param courses\r\n   * @param id\r\n   * @return {null}\r\n   */\r\n  static getCourseByCurrencyId(courses, id)\r\n  {\r\n    let course = null;\r\n    if (courses)\r\n    {\r\n      courses.map((item) =>\r\n      {\r\n        if (item.cb_currency.currency.id === id)\r\n        {\r\n          course = item\r\n        }\r\n\r\n\r\n      });\r\n    }\r\n\r\n    return course;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param sum\r\n   * @param fromCurrencyId\r\n   * @param toCurrencyId\r\n   * @param courses\r\n   * @returns {*}\r\n   */\r\n  static convert(sum, fromCurrencyId, toCurrencyId, courses = CurrencyConstants.courses)\r\n  {\r\n    try\r\n    {\r\n      if (courses.length > 0 && fromCurrencyId && toCurrencyId)\r\n      {\r\n        let fromCurrencyCourse = Money.getCourseByCurrencyId(courses, fromCurrencyId);\r\n        let toCurrencyCourse = Money.getCourseByCurrencyId(courses, toCurrencyId);\r\n\r\n\r\n        if (fromCurrencyId === toCurrencyId)\r\n        {\r\n          return sum;\r\n        }\r\n\r\n        //если выбранная валюта рубль, тогда просто изпользуем\r\n        //базу курсов с учётом даты\r\n        if (fromCurrencyId === CurrencyConstants.RUBBLE_ID)\r\n        {\r\n          return sum * toCurrencyCourse.value / toCurrencyCourse.nominal;\r\n        }\r\n\r\n        if (toCurrencyId === CurrencyConstants.RUBBLE_ID)\r\n        {\r\n          return sum * (1 / fromCurrencyCourse.value / fromCurrencyCourse.nominal);\r\n        }\r\n\r\n        return sum * (toCurrencyCourse.value / toCurrencyCourse.nominal) / (fromCurrencyCourse.value / fromCurrencyCourse.nominal);\r\n      } else\r\n      {\r\n        return 0;\r\n      }\r\n    } catch (e)\r\n    {\r\n      console.warn(e.message);\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}