{"version":3,"file":"InvestCalc.js","names":["React","Money","moment","ActiveConstants","AccountConstants","Active","exactMath","CurrencyConstants","BuyTrade","SellTrade","ActiveValueCalculator","IndexedDBCache","CryptoJS","InvestCalc","getRoundPriceByValue","item","value","number","parts","String","split","length","parseInt","type_id","CRYPTO","type","getRoundPrice","field","smallestNumberPrice","hasWholeNumber","checkTrade","trade","buy_trades","sell_trades","integerPart","decimalPart","getRound","getCount","format","getCountSum","getBuyPrice","sign","getAvgPrice","PROPERTY_GROUP","indexOf","CUSTOM_PROPERTY","getBuyOriginalPrice","getAvgOriginalPrice","getCurrencySignByActive","getBuySum","sum","getSum","DEBT_GROUP","buy_sum","getBuyOriginalSum","getOriginalSum","getCurrencySignById","buy_currency_id","original_buy_sum","code","getCodeAndSign","getBuyDate","avg_own_date","buy_at_date","getSellPrice","now","COUPON_GROUP","sellDate","sell_at_date","isBefore","getSellOriginalPrice","getSign","getSellSum","count","getPaymentsSum","payments","sell","child_item","sell_sum","getSellOriginalSum","sell_currency_id","original_sell_sum","CURRENCY","account","getSubAccountById","to_account_id","currency_id","from_account_id","getSellDate","date","trade_at_date","paid_at_date","getPeriod","nowDate","buyDate","Math","round","diff","startOf","getAnnuallyPercentByActives","actives","self","firstBuyDate","getFirstBuyDate","getAnnuallyPercentWithFactPercentByActives","profit","diffInDays","abs","annulyProfit","pow","initActivesData","activesWithoutCurrency","index","sums","values","sold","grids","gridIndex","updateLastValuation","valuationObj","newDate","newPrice","olderDate","olderPrice","isSameOrAfter","calculateCurrencyValuations","currencyIndex","lastValuations","forEach","active","includes","symbol","push","currencyKey","price","tradeDate","Array","isArray","attributes","valuations","valueDate","morph","value_at_date","current_sum","lastValuationsJSON","JSON","stringify","lastValuationsHash","MD5","toString","fillActivesDataByDates","cloneFirstBuyDate","clone","isSameOrBefore","formattedDate","dateIndex","calculateActiveValuationForDate","add","currentDate","id","gridKey","getGrid","isPackage","calculatePackageActiveValuation","calculateSingleActiveValuation","gridForActive","course","tradePrice","tradeOriginalPrice","lastTradeDate","valuePrice","valueOriginalPrice","lastValueDate","copyTrade","getCommissionSum","original_price","price_course","valuation","original_current_sum","current_sum_course","lastTrade","isAfter","paymentSum","buyTrade","buy_sum_course","buyTradeDate","payment","paidDate","sell_at","sellTrade","sell_sum_course","tradeSellDate","sellObj","original_sum","getFactPercentByActives","filter","ids","map","join","cacheKey","get","then","cachedValue","calculateProfit","set","dateProfit","totalSumInDate","activeId","activeProfitByDate","getFactMultiplierByDate","activeSum","fraction","e","console","warn","message","mul","sortedGrid","prevValuation","prevPrice","prevCount","prevPaymentSum","hasSell","multiplier","key","getCountByType","getPriceByType","getDateByType","isSame","profitStartDay","profitEndDay","getFactPercentByItem","grid","sort","a","b","firstDate","secondDate","getValuation","getInsuranceValuation","toDigits","getAnnuallyPercentByItem","getFirstBuyDays","nextDate","getAverageActivesCost","diffDays","coupons","coupon","is_confirmed","couponDate","dividends","dividend","getWholeActivesSum","state","properties","invests","getAccountValuation","bankBalance","brokerBalance","cashBalance","digitBalance","getWholeObligationSum","birthAtDate","getObligationCurrent","obligations","getObligationLongTerm","array","obj","parseFloat"],"sources":["../../src/helpers/InvestCalc.js"],"sourcesContent":["import React from 'react';\r\nimport Money from \"./Money\";\r\nimport moment from 'moment/moment';\r\nimport ActiveConstants from \"../constants/ActiveConstants\";\r\nimport AccountConstants from \"../constants/AccountConstants\";\r\nimport Active from \"./Active\";\r\nimport exactMath from \"exact-math\";\r\nimport CurrencyConstants from \"../constants/CurrencyConstants\";\r\nimport BuyTrade from \"../models/BuyTrade\";\r\nimport SellTrade from \"../models/SellTrade\";\r\nimport ActiveValueCalculator from \"./Active/ActiveValueCalculator\";\r\nimport IndexedDBCache from \"./IndexedDBCache\";\r\nimport CryptoJS from 'crypto-js';\r\n\r\nclass InvestCalc\r\n{\r\n  static getRoundPriceByValue(item, value) {\r\n    let number = 2;\r\n\r\n    // Логика для определения числа знаков после запятой\r\n    let parts = String(value).split('.');\r\n    if (parts.length > 1) {\r\n      if (parseInt(parts[0]) === 0) {\r\n        // Если целая часть равна 0, вернуть длину дробной части\r\n        return parts[1].length;\r\n      } else {\r\n        // Если целая часть больше 0, вернуть 2\r\n        return number;\r\n      }\r\n    } else {\r\n      // Если значение целое, вернуть 2\r\n      return number;\r\n    }\r\n\r\n    // Проверка типа для криптовалюты\r\n    if (item.type_id === ActiveConstants.CRYPTO || (item.item && item.item.type === 'CRYPTOCURRENCY')) {\r\n      number = 8;\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  static getRoundPrice(item, field)\r\n  {\r\n    let number = 2;\r\n    let smallestNumberPrice = null;\r\n    let hasWholeNumber = false;\r\n\r\n    const checkTrade = (trade) => {\r\n      const value = trade[field];\r\n      if (value >= 1) hasWholeNumber = true;\r\n      if (smallestNumberPrice === null || value < smallestNumberPrice) {\r\n        smallestNumberPrice = value;\r\n      }\r\n    };\r\n\r\n    if (item?.buy_trades?.length) {\r\n      for (const trade of item.buy_trades) {\r\n        checkTrade(trade);\r\n        if (hasWholeNumber) break; // Прерываем цикл при нахождении целого числа\r\n      }\r\n    }\r\n\r\n    if (!hasWholeNumber && item?.sell_trades?.length) {\r\n      for (const trade of item.sell_trades) {\r\n        checkTrade(trade);\r\n        if (hasWholeNumber) break; // Прерываем цикл при нахождении целого числа\r\n      }\r\n    }\r\n\r\n    if (hasWholeNumber) return 2;\r\n\r\n    if (smallestNumberPrice !== null) {\r\n      const [integerPart, decimalPart] = String(smallestNumberPrice).split('.');\r\n      if (integerPart === \"0\" && decimalPart) return decimalPart.length;\r\n      return number;\r\n    }\r\n\r\n    if (item.type_id === ActiveConstants.CRYPTO || (item.item && item.item.type === 'CRYPTOCURRENCY')) {\r\n      number = 8;\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  static getRound(item)\r\n  {\r\n    let number = 2;\r\n\r\n    if (item.type_id === ActiveConstants.CRYPTO)\r\n    {\r\n      number = 8;\r\n    }\r\n    if (item.item && item.item.type === 'CRYPTOCURRENCY')\r\n    {\r\n      number = 8;\r\n    }\r\n    return number;\r\n  }\r\n\r\n  static getCount(item)\r\n  {\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      return Money.format(Active.getCountSum(item, item.buy_trades), InvestCalc.getRound(item));\r\n    }\r\n  }\r\n\r\n  static getBuyPrice(item, sign)\r\n  {\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      return Money.format(ActiveValueCalculator.getAvgPrice(item, item.buy_trades), InvestCalc.getRoundPrice(item, 'price')) + ' ' + sign;\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  static getBuyOriginalPrice(item)\r\n  {\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      return Money.format(ActiveValueCalculator.getAvgOriginalPrice(item, item.buy_trades), InvestCalc.getRoundPrice(item, 'original_price')) + ' ' + CurrencyConstants.getCurrencySignByActive(item);\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  static getBuySum(item, sign)\r\n  {\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      let sum = ActiveValueCalculator.getSum(item.buy_trades);\r\n      return Money.format(ActiveValueCalculator.getSum(item.buy_trades), InvestCalc.getRoundPriceByValue(item, sum)) + ' ' + sign;\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      let sum = item.buy_sum;\r\n      return Money.format(sum) + ' ' + sign;\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      return Money.format(item.buy_sum) + ' ' + sign;\r\n    }\r\n  }\r\n\r\n  static getBuyOriginalSum(item)\r\n  {\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      let sum = ActiveValueCalculator.getOriginalSum(item.buy_trades);\r\n      return Money.format(sum, InvestCalc.getRoundPriceByValue(item, sum)) + ' ' + CurrencyConstants.getCurrencySignByActive(item);\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      let sign = CurrencyConstants.getCurrencySignById(item.buy_currency_id)\r\n\r\n      return Money.format(item.original_buy_sum) + ' ' + sign;\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      let {code, sign} = Active.getCodeAndSign(item);\r\n\r\n      return Money.format(item.original_buy_sum) + ' ' + sign;\r\n    }\r\n  }\r\n\r\n  static getBuyDate(item)\r\n  {\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      return item.avg_own_date;\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      return item.buy_at_date;\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      return item.buy_at_date;\r\n    }\r\n  }\r\n\r\n  static getSellPrice(item, now)\r\n  {\r\n    if (item.sell_trades?.length)\r\n    {\r\n      return Money.format(ActiveValueCalculator.getAvgPrice(item, item.sell_trades));\r\n    } else if (ActiveConstants.COUPON_GROUP.indexOf(item.type_id) !== -1 && item.buy_trades?.length)\r\n    {\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n      if (sellDate.isBefore(now))\r\n      {\r\n        return Money.format(item.buy_sum);\r\n      }\r\n    }\r\n  }\r\n\r\n  static getSellOriginalPrice(item)\r\n  {\r\n    if (item.sell_trades?.length)\r\n    {\r\n      let sign = this.getSign(item);\r\n\r\n      return Money.format(ActiveValueCalculator.getAvgOriginalPrice(item, item.sell_trades), InvestCalc.getRoundPrice(item, 'original_price')) + ' ' + sign;\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  static getSellSum(item, now, sign)\r\n  {\r\n    if (item.sell_trades?.length)\r\n    {\r\n      return Money.format(ActiveValueCalculator.getSum(item.sell_trades), InvestCalc.getRoundPrice(item, 'price')) + ' ' + sign;\r\n    } else if (ActiveConstants.COUPON_GROUP.indexOf(item.type_id) !== -1 && item.buy_trades?.length)\r\n    {\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n      if (sellDate.isBefore(now))\r\n      {\r\n        let count = Active.getCountSum(item, item.buy_trades);\r\n        return Money.format(item.buy_sum * count) + ' ' + sign;\r\n      }\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n\r\n      if (sellDate.isBefore(now))\r\n      {\r\n        return Money.format(Active.getPaymentsSum(item.payments)) + ' ' + sign;\r\n      }\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      if (item.sell)\r\n      {\r\n        let sell = item.sell.child_item;\r\n\r\n        return Money.format(sell.sum) + ' ' + sign;\r\n      }\r\n\r\n      return Money.format(item.sell_sum) + ' ' + sign;\r\n    }\r\n  }\r\n\r\n  static getSellOriginalSum(item)\r\n  {\r\n    if (item.sell_trades?.length)\r\n    {\r\n      let sign = this.getSign(item);\r\n\r\n      return Money.format(ActiveValueCalculator.getOriginalSum(item.sell_trades), InvestCalc.getRoundPrice(item, 'original_price')) + ' ' + sign;\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      let sign = CurrencyConstants.getCurrencySignById(item.sell_currency_id);\r\n\r\n      return Money.format(item.original_sell_sum) + ' ' + sign;\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      let sign = CurrencyConstants.getCurrencySignById(item.sell_currency_id);\r\n\r\n      return Money.format(item.original_sell_sum) + ' ' + sign;\r\n    }\r\n  }\r\n\r\n  static getSign(item)\r\n  {\r\n    let sign = '';\r\n\r\n    if (item.type_id === ActiveConstants.CURRENCY)\r\n    {\r\n      let account = AccountConstants.getSubAccountById(item.sell_trades[0].to_account_id);\r\n\r\n      if (account)\r\n      {\r\n        sign = CurrencyConstants.getCurrencySignById(account.currency_id);\r\n      }\r\n    } else\r\n    {\r\n      let account = AccountConstants.getSubAccountById(item.sell_trades[0].from_account_id);\r\n\r\n      if (account)\r\n      {\r\n        sign = CurrencyConstants.getCurrencySignById(account.currency_id);\r\n      }\r\n    }\r\n    return sign;\r\n  }\r\n\r\n  static getSellDate(item, now)\r\n  {\r\n    if (item.sell_trades?.length)\r\n    {\r\n      let date = item.sell_trades[item.sell_trades?.length - 1].trade_at_date;\r\n\r\n      return date;\r\n    } else if (ActiveConstants.COUPON_GROUP.indexOf(item.type_id) !== -1 && item.buy_trades?.length)\r\n    {\r\n\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n      if (sellDate.isBefore(now))\r\n      {\r\n        return item.sell_at_date;\r\n      }\r\n\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n      if (sellDate.isBefore(now))\r\n      {\r\n        return item.sell_at_date;\r\n      }\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      if (item.sell)\r\n      {\r\n        let sell = item.sell.child_item;\r\n\r\n        return sell.paid_at_date;\r\n      }\r\n\r\n      return item.sell_at_date;\r\n    }\r\n  }\r\n\r\n  static getPeriod(item, now)\r\n  {\r\n    if (item.sell_trades?.length)\r\n    {\r\n      let date = item.sell_trades[item.sell_trades?.length - 1].trade_at_date;\r\n\r\n      let nowDate = moment(date, 'DD.MM.YYYY');\r\n      let buyDate = moment(item.avg_own_date, 'DD.MM.YYYY');\r\n\r\n      return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n    } else if (ActiveConstants.COUPON_GROUP.indexOf(item.type_id) !== -1 && item.buy_trades?.length)\r\n    {\r\n\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n\r\n      let nowDate = sellDate.isBefore(now) ? sellDate : now;\r\n      let buyDate = moment(item.avg_own_date, 'DD.MM.YYYY');\r\n\r\n      return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n    } else if (ActiveConstants.DEBT_GROUP.indexOf(item.type_id) !== -1)\r\n    {\r\n      let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n\r\n      let nowDate = sellDate.isBefore(now) ? sellDate : now;\r\n      let buyDate = moment(item.buy_at_date, 'DD.MM.YYYY');\r\n\r\n      return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n    } else if (ActiveConstants.PROPERTY_GROUP.indexOf(item.type_id) !== -1 || [ActiveConstants.CUSTOM_PROPERTY].indexOf(item.type_id) !== -1)\r\n    {\r\n      if (item.sell_at_date)\r\n      {\r\n        let sellDate = moment(item.sell_at_date, 'DD.MM.YYYY');\r\n\r\n        let nowDate = sellDate.isBefore(now) ? sellDate : now;\r\n        let buyDate = moment(item.buy_at_date, 'DD.MM.YYYY');\r\n\r\n        return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n      } else if (item.sell)\r\n      {\r\n        let sell = item.sell.child_item;\r\n\r\n        let sellDate = moment(sell.paid_at_date, 'DD.MM.YYYY');\r\n\r\n        let nowDate = sellDate.isBefore(now) ? sellDate : now;\r\n        let buyDate = moment(item.buy_at_date, 'DD.MM.YYYY');\r\n\r\n        return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n      } else\r\n      {\r\n        let nowDate = now;\r\n        let buyDate = moment(item.buy_at_date, 'DD.MM.YYYY');\r\n\r\n        return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n      }\r\n    }\r\n\r\n    if (item.buy_trades?.length && item.buy_trades?.length)\r\n    {\r\n      let nowDate = moment().startOf('day');\r\n      let buyDate = moment(item.avg_own_date, 'DD.MM.YYYY');\r\n\r\n      return (Math.round((nowDate.diff(buyDate, 'months', true)) * 10) / 10) + ' мес.';\r\n    }\r\n  }\r\n\r\n  //TODO похоже на зачикливание\r\n  static getAnnuallyPercentByActives(actives, now, self)\r\n  {\r\n    let firstBuyDate = InvestCalc.getFirstBuyDate(actives);\r\n\r\n    if (firstBuyDate)\r\n    {\r\n      // let hasSell = false;\r\n      // let profit = InvestCalc.getAnnuallyPercentByActives(actives, now, self, hasSell);\r\n      //\r\n      // let diffInDays = Math.abs(firstBuyDate.diff(moment().startOf('day'), 'days'));\r\n      // profit -= 1;\r\n      //\r\n      // let annulyProfit = (Math.pow(profit + 1, (360 / (diffInDays ? diffInDays : 1)) - 1));\r\n\r\n      return 0;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  static getAnnuallyPercentWithFactPercentByActives(actives, profit)\r\n  {\r\n    let firstBuyDate = InvestCalc.getFirstBuyDate(actives);\r\n\r\n    if (firstBuyDate)\r\n    {\r\n      let diffInDays = Math.abs(firstBuyDate.diff(moment().startOf('day'), 'days'));\r\n      profit -= 1;\r\n\r\n      let annulyProfit = (Math.pow(profit + 1, (360 / diffInDays)) - 1);\r\n\r\n      return annulyProfit;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Инициализирует структуру данных (index, sums, values, sold, grids, gridIndex)\r\n   * и ищет дату первой покупки (firstBuyDate)\r\n   */\r\n  static initActivesData(activesWithoutCurrency) {\r\n    const index = [];\r\n    const sums = [];\r\n    const values = [];\r\n    const sold = [];\r\n    const grids = [];\r\n    const gridIndex = [];\r\n\r\n    const firstBuyDate = InvestCalc.getFirstBuyDate(activesWithoutCurrency);\r\n    return { index, sums, values, sold, grids, gridIndex, firstBuyDate };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param valuationObj\r\n   * @param newDate\r\n   * @param newPrice\r\n   */\r\n  static updateLastValuation(valuationObj, newDate, newPrice) {\r\n    if (valuationObj.olderDate === null) {\r\n      valuationObj.olderDate = newDate;\r\n      valuationObj.olderPrice = newPrice;\r\n    } else if (newDate.isSameOrAfter(valuationObj.olderDate)) {\r\n      valuationObj.olderDate = newDate;\r\n      valuationObj.olderPrice = newPrice;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Рассчитывает массив индексов валют (currencyIndex) и объект последних\r\n   * оценок (lastValuations) для каждого типа валюты из списка активов\r\n   */\r\n  static calculateCurrencyValuations(actives) {\r\n    const currencyIndex = [];\r\n    const lastValuations = [];\r\n\r\n    actives.forEach((active) => {\r\n      // Фиксируем валютный символ в currencyIndex (чтобы понять, какой это индекс)\r\n      if (!currencyIndex.includes(active.item.symbol)) {\r\n        currencyIndex.push(active.item.symbol);\r\n      }\r\n      const currencyKey = currencyIndex.indexOf(active.item.symbol);\r\n\r\n      // Инициализируем объект с датой/ценой\r\n      if (typeof lastValuations[currencyKey] === 'undefined') {\r\n        lastValuations[currencyKey] = { olderDate: null, olderPrice: null };\r\n      } else {\r\n        // Сбрасываем перед перерасчётом\r\n        lastValuations[currencyKey].olderDate = null;\r\n        lastValuations[currencyKey].olderPrice = null;\r\n      }\r\n\r\n      // Обрабатываем покупки\r\n      active.buy_trades.forEach((trade) => {\r\n        if (trade.price <= 0) return;\r\n        const tradeDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n        this.updateLastValuation(lastValuations[currencyKey], tradeDate, trade.price);\r\n      });\r\n\r\n      // Обрабатываем valuations\r\n      if (Array.isArray(active.attributes.valuations)) {\r\n        active.attributes.valuations.forEach((value) => {\r\n          const valueDate =\r\n            value.morph === 'active.user.valuation'\r\n              ? moment()\r\n              : moment(value.value_at_date, 'DD.MM.YYYY');\r\n          this.updateLastValuation(lastValuations[currencyKey], valueDate, value.current_sum);\r\n        });\r\n      }\r\n\r\n      // Обрабатываем продажи\r\n      if (Array.isArray(active.attributes.sell_trades)) {\r\n        active.attributes.sell_trades.forEach((trade) => {\r\n          const tradeDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n          this.updateLastValuation(lastValuations[currencyKey], tradeDate, trade.price);\r\n        });\r\n      }\r\n    });\r\n\r\n    // Превращаем lastValuations в JSON-строку\r\n    const lastValuationsJSON = JSON.stringify(lastValuations);\r\n\r\n    // Делаем хеш (md5 или любой другой)\r\n    const lastValuationsHash = CryptoJS.MD5(lastValuationsJSON).toString();\r\n\r\n    return { currencyIndex, lastValuations, lastValuationsHash };\r\n  }\r\n\r\n  /**\r\n   * Заполняет данные (sums, values, sold и т.д.) для всех активов\r\n   * по датам, начиная с firstBuyDate и заканчивая сегодня\r\n   */\r\n  static fillActivesDataByDates(\r\n    activesWithoutCurrency,\r\n    firstBuyDate,\r\n    index,\r\n    sums,\r\n    values,\r\n    sold,\r\n    grids,\r\n    gridIndex\r\n  ) {\r\n    const nowDate = moment().startOf('day');\r\n\r\n    // Клонируем дату, чтобы позже использовать в расчёте прибыли\r\n    const cloneFirstBuyDate = firstBuyDate.clone();\r\n\r\n    while (firstBuyDate && firstBuyDate.isSameOrBefore(nowDate)) {\r\n      const formattedDate = firstBuyDate.format('DD.MM.YYYY');\r\n\r\n      // Инициализируем массивы для данного индекса даты\r\n      if (!index.includes(formattedDate)) {\r\n        index.push(formattedDate);\r\n      }\r\n      const dateIndex = index.indexOf(formattedDate);\r\n\r\n      if (typeof sums[dateIndex] === 'undefined') sums[dateIndex] = [];\r\n      if (typeof sold[dateIndex] === 'undefined') sold[dateIndex] = [];\r\n      if (typeof values[dateIndex] === 'undefined') values[dateIndex] = [];\r\n\r\n      // Для каждого активa считаем его оценку\r\n      activesWithoutCurrency.forEach((active) => {\r\n        this.calculateActiveValuationForDate(\r\n          active,\r\n          firstBuyDate,\r\n          dateIndex,\r\n          sums,\r\n          values,\r\n          sold,\r\n          gridIndex,\r\n          grids\r\n        );\r\n      });\r\n\r\n      // Идём к следующему дню\r\n      firstBuyDate.add(1, 'days');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Считает оценку конкретного актива на определённую дату (firstBuyDate)\r\n   */\r\n  static calculateActiveValuationForDate(\r\n    active,\r\n    currentDate,\r\n    dateIndex,\r\n    sums,\r\n    values,\r\n    sold,\r\n    gridIndex,\r\n    grids\r\n  ) {\r\n    // Инициализируем \"ячейки\" для данного актива\r\n    if (typeof values[dateIndex][active.id] === 'undefined') {\r\n      values[dateIndex][active.id] = {};\r\n    }\r\n    if (typeof sums[dateIndex][active.id] === 'undefined') {\r\n      sums[dateIndex][active.id] = 0;\r\n    }\r\n    if (typeof sold[dateIndex][active.id] === 'undefined') {\r\n      sold[dateIndex][active.id] = 0;\r\n    }\r\n    if (!gridIndex.includes(active.id)) {\r\n      gridIndex.push(active.id);\r\n    }\r\n    const gridKey = gridIndex.indexOf(active.id);\r\n\r\n    if (typeof grids[gridKey] === 'undefined') {\r\n      // Предполагаем, что InvestCalc.getGrid() вернёт сетку оценок для актива\r\n      grids[gridKey] = InvestCalc.getGrid(active, moment().startOf('day'));\r\n    }\r\n\r\n    if (ActiveConstants.isPackage(active.type_id)) {\r\n      this.calculatePackageActiveValuation(\r\n        active,\r\n        currentDate,\r\n        dateIndex,\r\n        sums,\r\n        values,\r\n        sold,\r\n        grids[gridKey]\r\n      );\r\n    } else {\r\n      this.calculateSingleActiveValuation(\r\n        active,\r\n        currentDate,\r\n        dateIndex,\r\n        sums,\r\n        values,\r\n        sold\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Подсчёт оценки для \"пакета\" (множественные покупки/продажи, переоценки и т.д.)\r\n   */\r\n  static calculatePackageActiveValuation(\r\n    active,\r\n    firstBuyDate,\r\n    dateIndex,\r\n    sums,\r\n    values,\r\n    sold,\r\n    gridForActive\r\n  ) {\r\n    let count = 0;\r\n    let course = 0;\r\n    let tradePrice = 0;\r\n    let sell = false;\r\n    let tradeOriginalPrice = 0;\r\n    let lastTradeDate = null;\r\n    let valuePrice = 0;\r\n    let valueOriginalPrice = 0;\r\n    let lastValueDate = null;\r\n\r\n    // Покупки\r\n    active.attributes.buy_trades.forEach((trade) => {\r\n      // Копия сделки с учётом комиссии\r\n      const copyTrade = new BuyTrade({ ...trade });\r\n      copyTrade.price =\r\n        trade.price + ActiveValueCalculator.getCommissionSum([trade]) / trade.count;\r\n      copyTrade.original_price =\r\n        trade.original_price +\r\n        ActiveValueCalculator.getCommissionSum([trade]) / trade.count;\r\n\r\n      const tradeDate = moment(copyTrade.trade_at_date, 'DD.MM.YYYY');\r\n      if (!lastTradeDate) {\r\n        lastTradeDate = tradeDate;\r\n      }\r\n\r\n      // Если сделка раньше или в день firstBuyDate, прибавляем\r\n      if (tradeDate.isSameOrBefore(firstBuyDate)) {\r\n        count += copyTrade.count;\r\n        tradePrice = copyTrade.price;\r\n        tradeOriginalPrice = copyTrade.original_price;\r\n        course = copyTrade.price_course;\r\n      }\r\n    });\r\n\r\n    // Переоценки\r\n    active.attributes.valuations?.forEach((valuation) => {\r\n      const valueDate =\r\n        valuation.morph === 'active.user.valuation'\r\n          ? moment()\r\n          : moment(valuation.value_at_date, 'DD.MM.YYYY');\r\n\r\n      lastValueDate = valueDate;\r\n\r\n      if (valueDate.isSameOrBefore(firstBuyDate)) {\r\n        valuePrice = valuation.current_sum;\r\n        valueOriginalPrice = valuation.original_current_sum;\r\n        course = valuation.current_sum_course;\r\n      }\r\n    });\r\n\r\n    // Продажи\r\n    active.attributes.sell_trades.forEach((trade) => {\r\n      const copyTrade = new SellTrade({ ...trade });\r\n      copyTrade.price =\r\n        trade.price - ActiveValueCalculator.getCommissionSum([trade]) / trade.count;\r\n      copyTrade.original_price =\r\n        trade.original_price -\r\n        ActiveValueCalculator.getCommissionSum([trade]) / trade.count;\r\n\r\n      const tradeDate = moment(copyTrade.trade_at_date, 'DD.MM.YYYY');\r\n      lastTradeDate = tradeDate;\r\n\r\n      if (tradeDate.isSameOrBefore(firstBuyDate)) {\r\n        tradePrice = copyTrade.price;\r\n        tradeOriginalPrice = copyTrade.original_price;\r\n        course = copyTrade.price_course;\r\n        sell = true;\r\n      }\r\n    });\r\n\r\n    // Если нет продаж и переоценок, но были покупки -> берём цену из последней покупки\r\n    if (\r\n      (!active?.attributes?.valuations ||\r\n        active?.attributes?.valuations?.length === 0) &&\r\n      active.attributes.sell_trades.length === 0 &&\r\n      active.attributes.buy_trades.length > 0\r\n    ) {\r\n      const lastTrade =\r\n        active.attributes.buy_trades[active.attributes.buy_trades.length - 1];\r\n      const nowDate = moment().startOf('day');\r\n      if (nowDate.isSameOrBefore(firstBuyDate)) {\r\n        lastTradeDate = nowDate;\r\n        tradePrice = lastTrade.price;\r\n        tradeOriginalPrice = lastTrade.original_price;\r\n        course = lastTrade.price_course;\r\n      }\r\n    }\r\n\r\n    // Логика выбора цены: продажа / переоценка / покупка\r\n    if (sell) {\r\n      // Если актив продан, исключаем его из дальнейшей переоценки\r\n      // но учитываем цену продажи в дату продажи\r\n      sums[dateIndex][active.id] = sums[dateIndex][active.id] || 0;\r\n\r\n      // Если ещё не был помечен как \"продан\"\r\n      if (!sums[dateIndex][active.id]) {\r\n        sums[dateIndex][active.id] = tradePrice * count;\r\n      }\r\n    } else if (lastValueDate && lastValueDate.isAfter(lastTradeDate) && valuePrice > 0) {\r\n      // Оценка\r\n      sums[dateIndex][active.id] = count * valuePrice;\r\n    } else if (lastTradeDate && tradePrice > 0) {\r\n      // Покупка\r\n      sums[dateIndex][active.id] = count * tradePrice;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Подсчёт оценки для \"единичного\" актива (одна покупка/продажа)\r\n   */\r\n  static calculateSingleActiveValuation(\r\n    active,\r\n    firstBuyDate,\r\n    dateIndex,\r\n    sums,\r\n    values,\r\n    sold\r\n  ) {\r\n    let count = 0;\r\n    let tradePrice = 0;\r\n    let sell = false;\r\n    let tradeOriginalPrice = 0;\r\n    let lastTradeDate = null;\r\n    let valuePrice = 0;\r\n    let lastValueDate = null;\r\n    let paymentSum = 0;\r\n\r\n    // Данные о покупке\r\n    const buyTrade = {\r\n      price: active.buy_sum,\r\n      original_price: active.original_buy_sum,\r\n      price_course: active.buy_sum_course,\r\n    };\r\n    const buyTradeDate = moment(active.buy_at_date, 'DD.MM.YYYY');\r\n    if (!lastTradeDate) {\r\n      lastTradeDate = buyTradeDate;\r\n    }\r\n\r\n    // Если покупка была до (или в) firstBuyDate\r\n    if (buyTradeDate.isSameOrBefore(firstBuyDate)) {\r\n      count += 1;\r\n      tradePrice = buyTrade.price;\r\n      tradeOriginalPrice = buyTrade.original_price;\r\n      // Примечание: здесь в вашем исходном коде, похоже, опечатка:\r\n      // course = buyTradeDate.price_course; ?\r\n    }\r\n\r\n    // Переоценки\r\n    active.attributes.valuations?.forEach((valuation) => {\r\n      const valueDate =\r\n        valuation.morph === 'active.user.valuation'\r\n          ? moment()\r\n          : moment(valuation.value_at_date, 'DD.MM.YYYY');\r\n\r\n      lastValueDate = valueDate;\r\n\r\n      if (valueDate.isSameOrBefore(firstBuyDate)) {\r\n        valuePrice = valuation.current_sum;\r\n      }\r\n    });\r\n\r\n    // Платежи (например, дивиденды, купоны и т.д.)\r\n    active.attributes?.payments?.forEach((payment) => {\r\n      const paidDate = moment(payment.paid_at_date, 'DD.MM.YYYY');\r\n      if (paidDate.isSameOrBefore(firstBuyDate)) {\r\n        paymentSum += payment.sum;\r\n      }\r\n    });\r\n\r\n    // Продажа через sell_at\r\n    if (active.sell_at) {\r\n      const sellTrade = {\r\n        price: active.sell_sum,\r\n        original_price: active.original_sell_sum,\r\n        price_course: active.sell_sum_course,\r\n      };\r\n      const tradeSellDate = moment(active.sell_at_date, 'DD.MM.YYYY');\r\n      lastTradeDate = tradeSellDate;\r\n\r\n      if (tradeSellDate.isSameOrBefore(firstBuyDate)) {\r\n        tradePrice = sellTrade.price;\r\n        tradeOriginalPrice = sellTrade.original_price;\r\n        sell = true;\r\n      }\r\n    }\r\n    // Продажа через active.attributes.sell\r\n    else if (active.attributes?.sell) {\r\n      const sellObj = active.attributes.sell.child_item;\r\n      const sellTrade = {\r\n        price: sellObj.sum,\r\n        original_price: sellObj.original_sum,\r\n        price_course: sellObj.price_course,\r\n      };\r\n      const tradeSellDate = moment(sellObj.paid_at_date, 'DD.MM.YYYY');\r\n      lastTradeDate = tradeSellDate;\r\n\r\n      if (tradeSellDate.isSameOrBefore(firstBuyDate)) {\r\n        tradePrice = sellTrade.price;\r\n        tradeOriginalPrice = sellTrade.original_price;\r\n        sell = true;\r\n      }\r\n    }\r\n\r\n    // Логика выбора цены: продано / переоценка / покупка\r\n    if (sell) {\r\n      if (!sums[dateIndex][active.id]) {\r\n        // Если актив только что \"продаём\" в эту дату\r\n        sums[dateIndex][active.id] = active.sell_at\r\n          ? active.sell_sum\r\n          : active.attributes.sell.child_item.sum;\r\n      } else {\r\n        sums[dateIndex][active.id] = 0;\r\n      }\r\n    } else if (lastValueDate && lastValueDate.isAfter(lastTradeDate) && valuePrice > 0) {\r\n      // Оценка\r\n      sums[dateIndex][active.id] = count * valuePrice + paymentSum;\r\n    } else if (lastTradeDate && tradePrice > 0) {\r\n      // Покупка\r\n      sums[dateIndex][active.id] = count * tradePrice + paymentSum;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param ActiveModel[] actives\r\n   * @return {number}\r\n   */\r\n  static async getFactPercentByActives(actives)\r\n  {\r\n    let activesWithoutCurrency = actives.filter((active) =>\r\n    {\r\n      return active.type_id !== ActiveConstants.CURRENCY;\r\n    });\r\n\r\n    let ids = actives.map((active) =>\r\n    {\r\n      return active.id;\r\n    }).join(',');\r\n\r\n    // // 2. Рассчитываем последние оценки (lastValuations) для валют\r\n    const { currencyIndex, lastValuations, lastValuationsHash } = InvestCalc.calculateCurrencyValuations(activesWithoutCurrency);\r\n\r\n    let cacheKey = 'active.fact_percent.actives.' + ids + '.hash.' + lastValuationsHash;\r\n    return await IndexedDBCache.get(cacheKey).then((cachedValue) => {\r\n\r\n      if(cachedValue)\r\n      {\r\n        return cachedValue\r\n      }else{\r\n        // 3. Собираем индекс дат, суммы и др. для невалютных активов\r\n\r\n        const {\r\n          index,\r\n          sums,\r\n          values,\r\n          sold,\r\n          grids,\r\n          gridIndex,\r\n          firstBuyDate,\r\n        } = InvestCalc.initActivesData(activesWithoutCurrency);\r\n\r\n        // Если не удалось определить дату покупки (нет покупок), возвращаем 0\r\n        if (!firstBuyDate) {\r\n          return 0;\r\n        }\r\n\r\n        // 4. Идём по датам от первой покупки до текущей, считаем оценки\r\n        InvestCalc.fillActivesDataByDates(\r\n          activesWithoutCurrency,\r\n          firstBuyDate,\r\n          index,\r\n          sums,\r\n          values,\r\n          sold,\r\n          grids,\r\n          gridIndex\r\n        );\r\n\r\n        // 5. Считаем финальную доходность\r\n        let profit = InvestCalc.calculateProfit(index, sums, activesWithoutCurrency, grids, gridIndex);\r\n\r\n        IndexedDBCache.set(cacheKey, profit, 1000 * 60 * 60 * 24 * 7)//запомним на неделю\r\n\r\n        return profit;\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Подсчёт итоговой \"фактической\" доходности (profit)\r\n   * с учётом накопленных сумм, оценок и выплат\r\n   */\r\n  static calculateProfit(index, sums, activesWithoutCurrency, grids, gridIndex) {\r\n    let profit = 1;\r\n    const nowDate = moment().startOf('day');\r\n    const cloneFirstBuyDate = moment(index[0], 'DD.MM.YYYY'); // Первая дата из массива index\r\n\r\n    while (cloneFirstBuyDate && cloneFirstBuyDate.isSameOrBefore(nowDate)) {\r\n      const formattedDate = cloneFirstBuyDate.format('DD.MM.YYYY');\r\n      const dateIndex = index.indexOf(formattedDate);\r\n      let dateProfit = 0;\r\n\r\n      // Сумма всех активов в эту дату\r\n      let totalSumInDate = 0;\r\n      for (const activeId in sums[dateIndex]) {\r\n        totalSumInDate += sums[dateIndex][activeId];\r\n      }\r\n\r\n      // Для каждого актива вычисляем вклад в доходность\r\n      activesWithoutCurrency.forEach((active) => {\r\n        const gridKey = gridIndex.indexOf(active.id);\r\n        const activeProfitByDate = InvestCalc.getFactMultiplierByDate(\r\n          grids[gridKey],\r\n          cloneFirstBuyDate\r\n        );\r\n\r\n        const activeSum = sums[dateIndex][active.id] || 0;\r\n        const fraction = totalSumInDate ? activeSum / totalSumInDate : 0;\r\n\r\n        try {\r\n          if (activeProfitByDate !== 1) {\r\n            // Когда актив продан, доходность != 1\r\n            dateProfit = exactMath.add(dateProfit, activeProfitByDate * fraction);\r\n          } else {\r\n            dateProfit = exactMath.add(dateProfit, fraction);\r\n          }\r\n        } catch (e) {\r\n          console.warn(e.message);\r\n        }\r\n      });\r\n\r\n      // Умножаем совокупную доходность\r\n      if (dateProfit !== 0) {\r\n        profit = exactMath.mul(profit, dateProfit);\r\n      }\r\n\r\n      cloneFirstBuyDate.add(1, 'days');\r\n    }\r\n\r\n    return profit;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param sortedGrid\r\n   * @param date\r\n   * @returns {number}\r\n   */\r\n  static getFactMultiplierByDate(sortedGrid, date)\r\n  {\r\n    let prevValuation = null;\r\n    let prevPrice = null;\r\n    let prevCount = null;\r\n    let paymentSum = 0;\r\n    let prevPaymentSum = 0;\r\n    let hasSell = false;\r\n\r\n    let multiplier = 1;\r\n\r\n    sortedGrid.map((valuation, key) =>\r\n    {\r\n      if (key === 0)\r\n      {\r\n        //пропускаем первый шаг, там доходности не будет\r\n        prevValuation = valuation;\r\n        prevPrice = valuation.type === 'buy_trade' ? valuation.item.price : 0;\r\n        prevCount = valuation.type === 'buy_trade' ? valuation.item.count : 0;\r\n\r\n        return;\r\n      }\r\n\r\n      let count = InvestCalc.getCountByType(valuation);\r\n      let price = InvestCalc.getPriceByType(valuation);\r\n      let currentDate = InvestCalc.getDateByType(valuation);\r\n\r\n      //получаем доходность на конкретную дату\r\n      if (currentDate && currentDate.isSame(date))\r\n      {\r\n        let profitStartDay = (prevPrice * prevCount) + (prevPrice * (count ? count : prevCount)) + prevPaymentSum;\r\n        let profitEndDay = (price * prevCount) + (price * (count ? count : prevCount));\r\n        multiplier *= (1 + ((profitEndDay / profitStartDay) - 1));\r\n      }\r\n\r\n      if (valuation.type === 'buy_trade')\r\n      {\r\n        prevPrice = valuation.item.price;\r\n        prevCount = valuation.item.count;\r\n      } else if (valuation.type === 'valuation')\r\n      {\r\n        prevPrice = valuation.item.current_sum;\r\n      } else if (valuation.type === 'sell_trade')\r\n      {\r\n        prevPrice = valuation.item.price;\r\n        hasSell = true;\r\n      }\r\n\r\n      prevValuation = valuation;\r\n    });\r\n\r\n    return multiplier;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @return {Promise<*>}\r\n   */\r\n  static async getFactPercentByItem(item)\r\n  {\r\n    return await InvestCalc.getFactPercentByActives([item])\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @returns {*|moment.Moment}\r\n   */\r\n  static getDateByType(item)\r\n  {\r\n    switch (item.type)\r\n    {\r\n      case 'buy_trade':\r\n      case 'sell_trade':\r\n        return moment(item.item.trade_at_date, 'DD.MM.YYYY');\r\n      case 'valuation':\r\n        if (item.morph === 'active.user.valuation')\r\n        {\r\n          return moment();\r\n        }\r\n\r\n        return moment(item.item.value_at_date, 'DD.MM.YYYY');\r\n      case 'payment':\r\n        return moment(item.item.paid_at_date, 'DD.MM.YYYY');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param type\r\n   * @returns {*}\r\n   */\r\n  static getPriceByType(item, type)\r\n  {\r\n    switch (item.type)\r\n    {\r\n      case 'buy_trade':\r\n      case 'sell_trade':\r\n        return item.item.price;\r\n      case 'valuation':\r\n        return item.item.current_sum;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @returns {boolean}\r\n   */\r\n  static getCountByType(item)\r\n  {\r\n    switch (item.type)\r\n    {\r\n      case 'buy_trade':\r\n      case 'sell_trade':\r\n        return item.item.count;\r\n      case 'valuation':\r\n        return false;\r\n    }\r\n  }\r\n\r\n  static getGrid(active, now)\r\n  {\r\n    let grid = [];\r\n\r\n    if (ActiveConstants.isPackage(active.type_id))\r\n    {\r\n      if (active.attributes?.valuations?.length)\r\n      {\r\n        active.attributes.valuations?.map((valuation) =>\r\n        {\r\n          grid.push({\r\n            item: valuation,\r\n            type: 'valuation'\r\n          })\r\n        })\r\n      }\r\n\r\n      if (active.attributes.buy_trades.length)\r\n      {\r\n        active.attributes.buy_trades.map((trade) =>\r\n        {\r\n          //для рассчёта оценки сделаем копию с ценой с учетом комиссии\r\n          let copyTrade = new BuyTrade({...trade});\r\n\r\n          copyTrade.price = trade.price + (ActiveValueCalculator.getCommissionSum([trade]) / trade.count);\r\n          copyTrade.original_price = trade.original_price + (ActiveValueCalculator.getCommissionSum([trade]) / trade.count);\r\n\r\n          grid.push({\r\n            item: copyTrade,\r\n            type: 'buy_trade'\r\n          })\r\n        })\r\n      }\r\n\r\n      if (active.attributes.sell_trades.length)\r\n      {\r\n        active.attributes.sell_trades.map((trade) =>\r\n        {\r\n          //для рассчёта оценки сделаем копию с ценой с учетом комиссии\r\n          let copyTrade = new SellTrade({...trade});\r\n          copyTrade.price = trade.price - (ActiveValueCalculator.getCommissionSum([trade]) / trade.count);\r\n          copyTrade.original_price = trade.original_price - (ActiveValueCalculator.getCommissionSum([trade]) / trade.count);\r\n\r\n          grid.push({\r\n            item: copyTrade,\r\n            type: 'sell_trade'\r\n          })\r\n        })\r\n      }\r\n\r\n      if (active.attributes?.valuations?.length === 0 && active.attributes.sell_trades?.length === 0 && active.attributes.buy_trades.length > 0)\r\n      {\r\n        let lastTrade = active.attributes.buy_trades[active.attributes.buy_trades.length - 1];\r\n        grid.push({\r\n          item: {\r\n            price: lastTrade.price,\r\n            original_price: lastTrade.original_price,\r\n            trade_at_date: lastTrade.value_at_date\r\n          },\r\n          type: 'sell_trade'\r\n        })\r\n      }\r\n    } else\r\n    {\r\n      if (active?.attributes?.valuations?.length)\r\n      {\r\n        active.attributes.valuations?.map((valuation) =>\r\n        {\r\n          grid.push({\r\n            item: valuation,\r\n            type: 'valuation'\r\n          })\r\n        })\r\n      }\r\n\r\n      // if(active.payments.length)\r\n      // {\r\n      //   active.payments.map((payment) => {\r\n      //     grid.push({\r\n      //       item: payment,\r\n      //       type: 'payment'\r\n      //     })\r\n      //   })\r\n      // }\r\n\r\n      //для рассчёта оценки сделаем копию с ценой с учетом комиссии\r\n      let buyTrade = {};\r\n      buyTrade.price = active.buy_sum;\r\n      buyTrade.original_price = active.original_buy_sum;\r\n      buyTrade.trade_at_date = active.buy_at_date;\r\n      buyTrade.count = 1;\r\n\r\n      grid.push({\r\n        item: buyTrade,\r\n        type: 'buy_trade',\r\n      })\r\n\r\n\r\n      if (active.sell_at)\r\n      {\r\n        //для рассчёта оценки сделаем копию с ценой с учетом комиссии\r\n        let sellTrade = {};\r\n        sellTrade.price = active.sell_sum;\r\n        sellTrade.original_price = active.original_sell_sum;\r\n        sellTrade.trade_at_date = active.sell_at_date;\r\n        sellTrade.count = 1;\r\n\r\n        grid.push({\r\n          item: sellTrade,\r\n          type: 'sell_trade',\r\n        })\r\n      } else if (active.sell)\r\n      {\r\n        let sell = active.sell.child_item;\r\n\r\n        let sellTrade = {};\r\n        sellTrade.price = sell.sum;\r\n        sellTrade.original_price = sell.original_sum;\r\n        sellTrade.trade_at_date = sell.paid_at_date;\r\n        sellTrade.count = 1;\r\n\r\n        grid.push({\r\n          item: sellTrade,\r\n          type: 'sell_trade',\r\n        })\r\n      }\r\n    }\r\n\r\n    let sortedGrid = grid?.sort(function (a, b)\r\n    {\r\n      let firstDate = InvestCalc.getDateByType(a);\r\n      let secondDate = InvestCalc.getDateByType(b);\r\n\r\n      if (firstDate.isSame(secondDate))\r\n      {\r\n        //продажу отодвигаем в конец\r\n        if (a.type === 'sell_trade')\r\n        {\r\n          return 1;\r\n        }\r\n        if (b.type === 'sell_trade')\r\n        {\r\n          return -1;\r\n        }\r\n        if (a.type === 'valuation' || a.type === 'payment')\r\n        {\r\n          return 1;\r\n        }\r\n        if (b.type === 'valuation' || b.type === 'payment')\r\n        {\r\n          return -1;\r\n        }\r\n\r\n        return 0;\r\n      }\r\n\r\n      return firstDate - secondDate;\r\n    });\r\n\r\n    return sortedGrid;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param actives\r\n   * @return {number}\r\n   */\r\n  static getValuation(actives)\r\n  {\r\n    let sum = 0;\r\n\r\n    actives?.map((active) =>\r\n    {\r\n      let value = active.valuation;\r\n\r\n      if (value > 0)\r\n      {\r\n        sum += value;\r\n      }\r\n    });\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param actives\r\n   * @return {number}\r\n   */\r\n  static getInsuranceValuation(actives)\r\n  {\r\n    let sum = 0;\r\n\r\n    actives.map((active) =>\r\n    {\r\n      let value = Money.toDigits(active.buy_sum);\r\n\r\n      if (value > 0)\r\n      {\r\n        sum += value;\r\n      }\r\n    });\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @returns {number}\r\n   */\r\n  static async getAnnuallyPercentByItem(item)\r\n  {\r\n    let profit = await InvestCalc.getFactPercentByItem(item);\r\n\r\n    let firstBuyDate = InvestCalc.getFirstBuyDate([item]);\r\n\r\n    if (firstBuyDate)\r\n    {\r\n      let diffInDays = Math.abs(firstBuyDate.diff(moment().startOf('day'), 'days'));\r\n      profit -= 1;\r\n\r\n      let annulyProfit = (Math.pow(profit + 1, (360 / diffInDays)) - 1);\r\n\r\n      return annulyProfit;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  static getFirstBuyDays(actives)\r\n  {\r\n    let nowDate = moment().startOf('day');\r\n    let firstBuyDate = null;\r\n\r\n    actives.map((active) =>\r\n    {\r\n      active.buy_trades.map((trade) =>\r\n      {\r\n        if (firstBuyDate === null)\r\n        {\r\n          firstBuyDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n        }\r\n\r\n        let nextDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n        if (firstBuyDate.isAfter(nextDate))\r\n        {\r\n          firstBuyDate = nextDate;\r\n        }\r\n      })\r\n    });\r\n\r\n    let diff = Math.abs(nowDate.diff(firstBuyDate, 'days'))\r\n\r\n    return diff > 0 ? diff : 0;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param actives\r\n   * @returns {*}\r\n   */\r\n  static getFirstBuyDate(actives)\r\n  {\r\n    let firstBuyDate = null;\r\n\r\n    actives.map((active) =>\r\n    {\r\n      if (ActiveConstants.isPackage(active.type_id))\r\n      {\r\n        active.buy_trades.map((trade) =>\r\n        {\r\n          if (firstBuyDate === null)\r\n          {\r\n            firstBuyDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n          }\r\n\r\n          let nextDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n          if (firstBuyDate.isAfter(nextDate))\r\n          {\r\n            firstBuyDate = nextDate;\r\n          }\r\n        })\r\n      } else\r\n      {\r\n        if (firstBuyDate === null)\r\n        {\r\n          firstBuyDate = moment(active.buy_at_date, 'DD.MM.YYYY');\r\n        }\r\n\r\n        let nextDate = moment(active.buy_at_date, 'DD.MM.YYYY');\r\n        if (firstBuyDate.isAfter(nextDate))\r\n        {\r\n          firstBuyDate = nextDate;\r\n        }\r\n      }\r\n    });\r\n\r\n    return firstBuyDate;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param actives\r\n   * @returns {number}\r\n   *\r\n   * тут считается так, у нас есть отрезок времени, например 10 дней для простоты возмём.\r\n   *\r\n   * в первый день я купил 10 акций по 100 и в пятый день купил 10 акций по 100, а на 7 день продал 10 акций\r\n   *\r\n   * изначально 0\r\n   * 1.  +100 = 100\r\n   * 2. +100 = 200\r\n   * 3. +100 = 300\r\n   * 4. +100 = 400\r\n   * 5. +200 = 600\r\n   * 6. +200 = 800\r\n   * 7. +100 = 900\r\n   * 8. +100 = 1000\r\n   * 9. +100 = 1100\r\n   * 10. +100 = 1200\r\n   *\r\n   *\r\n   * сумму делим на количество дней\r\n   * 1200 / 10 = 120 средняя\r\n   */\r\n  static getAverageActivesCost(actives)\r\n  {\r\n    let activesWithoutCurrency = actives.filter((active) =>\r\n    {\r\n      return active.type_id !== ActiveConstants.CURRENCY;\r\n    });\r\n\r\n    let sum = 0;\r\n    let firstBuyDate = InvestCalc.getFirstBuyDate(activesWithoutCurrency);\r\n    let nowDate = moment().startOf('day');\r\n\r\n    let diffDays = nowDate.diff(firstBuyDate, 'days');\r\n\r\n    while (firstBuyDate && firstBuyDate.isBefore(nowDate))\r\n    {\r\n      activesWithoutCurrency.map((active) =>\r\n      {\r\n        let count = 0;\r\n        let tradePrice = 0;\r\n        let lastTradeDate = null;\r\n        let valuePrice = 0;\r\n        let lastValueDate = null;\r\n\r\n        if (ActiveConstants.isPackage(active.type_id))\r\n        {\r\n          active.buy_trades.map((trade) =>\r\n          {\r\n            let tradeDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n\r\n            if (lastTradeDate === null)\r\n            {\r\n              lastTradeDate = tradeDate;\r\n            }\r\n\r\n            if (tradeDate.isSameOrBefore(firstBuyDate))\r\n            {\r\n              count += trade.count;\r\n              tradePrice = trade.price;\r\n            }\r\n          });\r\n\r\n          active.buy_trades.map((trade) =>\r\n          {\r\n\r\n            /**\r\n             * @var ActiveTradeCoupon $coupon\r\n             */\r\n            if (trade.coupons)\r\n            {\r\n              trade.coupons.map((coupon) =>\r\n              {\r\n                if (coupon.is_confirmed)\r\n                {\r\n                  let couponDate = moment(coupon.paid_at_date, 'DD.MM.YYYY');\r\n\r\n                  if (couponDate.isSame(nowDate))\r\n                  {\r\n                    sum += coupon.sum * count;\r\n                  }\r\n                }\r\n              })\r\n            }\r\n          });\r\n\r\n\r\n          active.attributes.valuations?.map((valuation) =>\r\n          {\r\n            let valueDate;\r\n            if (valuation.morph === 'active.user.valuation')\r\n            {\r\n              valueDate = moment();\r\n            } else\r\n            {\r\n              valueDate = moment(valuation.value_at_date, 'DD.MM.YYYY');\r\n            }\r\n\r\n            lastValueDate = valueDate;\r\n\r\n            if (valueDate.isSameOrBefore(firstBuyDate))\r\n            {\r\n              valuePrice = valuation.current_sum;\r\n            }\r\n          });\r\n\r\n          active.attributes.dividends.map((dividend) =>\r\n          {\r\n            let paidDate = moment(dividend.paid_at_date, 'DD.MM.YYYY');\r\n            //\r\n            // if(lastTradeDate === null)\r\n            // {\r\n            // lastValueDate = valueDate;\r\n            // }\r\n\r\n            if (paidDate.isSame(firstBuyDate))\r\n            {\r\n              sum += dividend.sum * count;\r\n            }\r\n          });\r\n\r\n          active.attributes.sell_trades.map((trade) =>\r\n          {\r\n            let tradeDate = moment(trade.trade_at_date, 'DD.MM.YYYY');\r\n\r\n            lastTradeDate = tradeDate;\r\n\r\n            if (tradeDate.isSameOrBefore(firstBuyDate))\r\n            {\r\n              count -= trade.count;\r\n            }\r\n          });\r\n        } else\r\n        {\r\n          let tradeDate = moment(active.buy_at_date, 'DD.MM.YYYY');\r\n\r\n          if (lastTradeDate === null)\r\n          {\r\n            lastTradeDate = tradeDate;\r\n          }\r\n\r\n          if (tradeDate.isSameOrBefore(firstBuyDate))\r\n          {\r\n            count += 1;\r\n            tradePrice = active.buy_sum;\r\n          }\r\n\r\n          active.attributes.valuations?.map((valuation) =>\r\n          {\r\n            let valueDate;\r\n            if (valuation.morph === 'active.user.valuation')\r\n            {\r\n              valueDate = moment();\r\n            } else\r\n            {\r\n              valueDate = moment(valuation.value_at_date, 'DD.MM.YYYY');\r\n            }\r\n\r\n            lastValueDate = valueDate;\r\n\r\n            if (valueDate.isSameOrBefore(firstBuyDate))\r\n            {\r\n              valuePrice = valuation.current_sum;\r\n            }\r\n          });\r\n\r\n          if (active.sell_at)\r\n          {\r\n            let tradeDate = moment(active.sell_at_date, 'DD.MM.YYYY');\r\n\r\n            lastTradeDate = tradeDate;\r\n\r\n            if (tradeDate.isSameOrBefore(firstBuyDate))\r\n            {\r\n              count -= 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        //если оценка была позже чем последняя сделка, то берем цену из оценки\r\n        if (lastValueDate !== null && lastValueDate.isAfter(lastTradeDate) && valuePrice > 0)\r\n        {\r\n          sum += count * valuePrice;\r\n        } else if (lastTradeDate !== null && tradePrice > 0)\r\n        {\r\n          sum += count * tradePrice;\r\n        }\r\n      });\r\n\r\n      firstBuyDate.add(1, 'days')\r\n    }\r\n\r\n    return sum / diffDays;\r\n  }\r\n\r\n  static getWholeActivesSum(state)\r\n  {\r\n    let sum = 0;\r\n\r\n    sum += InvestCalc.getValuation(state.properties ?? []);\r\n    sum += InvestCalc.getValuation(state.invests ?? []);\r\n\r\n    sum += InvestCalc.getAccountValuation(state.bankBalance ?? 0);\r\n    sum += InvestCalc.getAccountValuation(state.brokerBalance ?? 0);\r\n    sum += InvestCalc.getAccountValuation(state.cashBalance ?? 0);\r\n    sum += InvestCalc.getAccountValuation(state.digitBalance ?? 0);\r\n\r\n    return sum;\r\n  }\r\n\r\n  static getWholeObligationSum(state, birthAtDate)\r\n  {\r\n    let sum = 0;\r\n\r\n    sum += InvestCalc.getObligationCurrent(state.obligations ?? []);\r\n    sum += InvestCalc.getObligationLongTerm(state.obligations ?? [], birthAtDate);\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param array\r\n   * @return {*|number}\r\n   */\r\n  static getAccountValuation(array)\r\n  {\r\n    return array.sum > 0 ? array.sum : 0;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param array\r\n   * @return {number}\r\n   */\r\n  static getObligationCurrent(array)\r\n  {\r\n    let sum = 0;\r\n    let now = moment();\r\n    array?.map((item) =>\r\n    {\r\n      let obj = Active.getObligationCurrent(item, now);\r\n\r\n      if (obj)\r\n      {\r\n        sum += parseFloat(obj.sum);\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param array\r\n   * @param birthAtDate\r\n   * @return {number}\r\n   */\r\n  static getObligationLongTerm(array, birthAtDate)\r\n  {\r\n    let sum = 0;\r\n    let now = moment();\r\n    array?.map((item) =>\r\n    {\r\n      let obj = Active.getObligationLongTerm(item, now, moment(birthAtDate, 'DD.MM.YYYY'));\r\n\r\n      if (obj)\r\n      {\r\n        sum += parseFloat(obj.sum);\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    return sum;\r\n  }\r\n}\r\n\r\n\r\nexport default InvestCalc;\r\n\r\n"],"mappings":"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"}