{"version":3,"file":"ActiveValueCalculator.js","names":["moment","TradeCommissionConstants","exactMath","ActiveValueCalculator","calculate","active","items","getAvgPrice","trades","original","totalCost","totalCount","lotsize","item","forEach","trade","add","mul","count","original_price","price","avgPrice","div","sum","map","original_sum","getAvgOriginalPrice","getAvgDate","getSum","getOriginalSum","getCouponBuySum","buy_trades","length","n","original_accumulated_coupon","accumulated_coupon","getCouponSellOriginalSum","getCouponSellSum","getCouponBuyOriginalSum","sell_trades","getPaymentsSum","payments","payment","getDividendSum","nowDate","dividends","dividend","decideDate","decided_at_date","startOf","tradeDate","trade_at_date","isBefore","buyTrade","sellTrade","buyTradeDate","sellTradeDate","getDividendOriginalSum","getCommissionSum","commissions","commission","type_id","FIX","PERCENT","percent","getCommissionOriginalSum"],"sources":["../../../src/helpers/Active/ActiveValueCalculator.js"],"sourcesContent":["import moment from \"moment/moment\";\r\nimport TradeCommissionConstants from \"./../../constants/TradeCommissionConstants\";\r\nimport exactMath from \"exact-math\";\r\n\r\nexport default class ActiveValueCalculator\r\n{\r\n  static calculate(active, items) {\r\n    // template method\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param active\r\n   * @param trades\r\n   * @param original\r\n   * @return {number}\r\n   */\r\n  static getAvgPrice(active, trades, original = false)\r\n  {\r\n    let totalCost = 0;\r\n    let totalCount = 0;\r\n    let lotsize = 1;\r\n\r\n    if(active.lotsize){\r\n      lotsize = active.lotsize;\r\n    }else if(active.item && active.item.lotsize){\r\n      lotsize = active.item.lotsize;\r\n    }\r\n\r\n    trades.forEach(trade => {\r\n      totalCost = exactMath.add(totalCost, exactMath.mul(trade.count, original ? trade.original_price : trade.price));\r\n      totalCount = exactMath.add(totalCount, trade.count);\r\n    });\r\n\r\n    let avgPrice = exactMath.div(totalCost, totalCount);\r\n\r\n    if(avgPrice === 0)\r\n    {\r\n      let count = 0;\r\n      let sum = 0;\r\n      trades.map((trade) =>\r\n      {\r\n        sum = exactMath.add(sum, original ? trade.original_sum : trade.sum);\r\n        count = exactMath.add(count, trade.count);\r\n      });\r\n\r\n      return exactMath.div(sum, count);\r\n    }else{\r\n      return avgPrice;\r\n    }\r\n  }\r\n\r\n  static getAvgOriginalPrice(active, trades) {\r\n    return this.getAvgPrice(active, trades, true)\r\n  }\r\n\r\n  static getAvgDate(active, items) {\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param items\r\n   * @param original\r\n   * @return {number}\r\n   */\r\n  static getSum(items, original = false)\r\n  {\r\n    let sum = 0;\r\n    items.map((trade) =>\r\n    {\r\n      sum += original ? trade.original_sum : trade.sum;\r\n    });\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param items\r\n   * @return {number}\r\n   */\r\n  static getOriginalSum(items)\r\n  {\r\n    return this.getSum(items, true)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param original\r\n   * @return {number}\r\n   */\r\n  static getCouponBuySum(item, original = false)\r\n  {\r\n    let sum = 0;\r\n\r\n    if (item?.buy_trades?.length)\r\n    {\r\n      for (let n = 0; n < item.buy_trades.length; n++)\r\n      {\r\n        sum -= original ? item.buy_trades[n].original_accumulated_coupon : item.buy_trades[n].accumulated_coupon\r\n      }\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @return {number}\r\n   */\r\n  static getCouponSellOriginalSum(item)\r\n  {\r\n    return this.getCouponSellSum(item, true)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @returns {number}\r\n   */\r\n  static getCouponBuyOriginalSum(item)\r\n  {\r\n    return this.getCouponBuySum(item, true)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param original\r\n   * @return {number}\r\n   */\r\n  static getCouponSellSum(item, original = false)\r\n  {\r\n    let sum = 0;\r\n\r\n    if (item.sell_trades?.length)\r\n    {\r\n      for (let n = 0; n < item.sell_trades.length; n++)\r\n      {\r\n        sum += original ? item.sell_trades[n].original_accumulated_coupon : item.sell_trades[n].accumulated_coupon\r\n      }\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param payments\r\n   * @returns {number}\r\n   */\r\n  static getPaymentsSum(payments)\r\n  {\r\n    let sum = 0;\r\n    if (payments.length)\r\n    {\r\n      payments.map((payment) =>\r\n      {\r\n        sum += payment.sum;\r\n      });\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param original\r\n   * @return {number}\r\n   */\r\n  static getDividendSum(item, original = false)\r\n  {\r\n    let sum = 0;\r\n    let nowDate = moment();\r\n    if (item.dividends && item.dividends.length)\r\n    {\r\n      item.dividends.map((dividend) =>\r\n      {\r\n        let decideDate = moment(dividend.decided_at_date, 'DD.MM.YYYY').startOf('day');\r\n        if (item.sell_trades && item.sell_trades.length === 0)\r\n        {\r\n          item.buy_trades.map((trade) =>\r\n          {\r\n            let tradeDate = moment(trade.trade_at_date, 'DD.MM.YYYY').startOf('day');\r\n            if (tradeDate.isBefore(decideDate) && decideDate.isBefore(nowDate))\r\n            {\r\n              sum += (original ? dividend.original_sum : dividend.sum) * trade.count;\r\n            }\r\n\r\n\r\n          });\r\n        } else\r\n        {\r\n          if (item.buy_trades?.length && item.sell_trades?.length)\r\n          {\r\n            let buyTrade = item.buy_trades[0];\r\n            let sellTrade = item.sell_trades[0];\r\n\r\n            let buyTradeDate = moment(buyTrade.trade_at_date, 'DD.MM.YYYY').startOf('day');\r\n            let sellTradeDate = moment(sellTrade.trade_at_date, 'DD.MM.YYYY').startOf('day');\r\n\r\n            if (buyTradeDate.isBefore(decideDate) && decideDate.isBefore(sellTradeDate))\r\n            {\r\n              sum += (original ? dividend.original_sum : dividend.sum) * buyTrade.count;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @returns {number}\r\n   */\r\n  static getDividendOriginalSum(item)\r\n  {\r\n    return this.getDividendSum(item, true)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param items\r\n   * @param original\r\n   * @return {number}\r\n   */\r\n  static getCommissionSum(items, original = false)\r\n  {\r\n    let sum = 0;\r\n    if (items.length)\r\n    {\r\n      items.map((item) =>\r\n      {\r\n        if (item.commissions && item.commissions.length)\r\n        {\r\n          item.commissions.map((commission) =>\r\n          {\r\n            switch (commission.type_id)\r\n            {\r\n              case TradeCommissionConstants.FIX:\r\n                sum += original ? commission.original_sum : commission.sum;\r\n                break;\r\n              case TradeCommissionConstants.PERCENT:\r\n                sum += commission.percent / 100 * (original ? item.original_sum : item.sum);\r\n                break;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param items\r\n   * @return {number}\r\n   */\r\n  static getCommissionOriginalSum(items)\r\n  {\r\n    return this.getCommissionSum(items, true)\r\n  }\r\n}"],"mappings":"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"}